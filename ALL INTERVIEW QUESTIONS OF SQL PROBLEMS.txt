########### YASH TECHNOLOGIES LISTAGG FUNCTION #######################################

CREATE OR REPLACE TABLE INFORMATION (
SCHEMA_NAME VARCHAR,
TABLE_NAME VARCHAR,
COLUMN_NAME VARCHAR
);

INSERT INTO INFORMATION (SCHEMA_NAME, TABLE_NAME, COLUMN_NAME)
VALUES('dbo', 'project', 'project_id'),
('dbo', 'project', 'project_name');

SELECT  * FROM INFORMATION;

SELECT SCHEMA_NAME, TABLE_NAME, LISTAGG(COLUMN_NAME,',') FROM INFORMATION
GROUP BY SCHEMA_NAME, TABLE_NAME;


###### YASH TECHNOLOGIES COUNT OF NO OF ROWS AFTER APPLYING JOINS ###############  

CREATE OR REPLACE TABLE MYTABA(ID INT);
INSERT INTO MYTABA (ID) VALUES (1),(1),(2),(2),(3),(3),(4),(4),(4),(4) ;

CREATE OR REPLACE TABLE MYTABB(IB INT);
INSERT INTO MYTABB (IB) VALUES (1),(1),(1),(1),(2),(3),(4),(4);

SELECT * FROM MYTABA A JOIN MYTABA B ON A.ID = B.ID;

########### YASH TECHNOLOGIES RANK, DENSE_RANK, LEAD, LAG, ROW_NUMBER MIN(SALARY), MAX(SALARY) ##########

INSERT INTO DB_IBM_STG.SCH_IBM.YASH (NAME, DEPT, SALARY) VALUES 
('Sam', 'Finance', '6000'),
('Samuel', 'Finance', '7000'),
('Jogesh', 'HR', '14000'),
('Mannu', 'HR', '15000'),
('Mausam', 'Marketing', '12000'),
('Lamba', 'Marketing', '13000'),
('James', 'Sales', '2000'),
('Laren', 'Sales', '5000'),
('Sofy', 'Sales', '3000'),
('Kiku', 'Sales', '4000');

SELECT NAME FROM (
SELECT Y.*, DENSE_RANK() OVER(PARTITION BY DEPT ORDER BY SALARY) AS RK FROM YASH Y)
WHERE RK = 2;

SELECT * FROM (
SELECT Y.*, ROW_NUMBER() OVER(PARTITION BY DEPT ORDER BY NAME) RN FROM YASH Y
) T 
WHERE T.RN = 2;

SELECT Y.*, LEAD(SALARY) OVER(PARTITION BY DEPT ORDER BY NAME) NEXT_EMPLOYEE_SALARY FROM YASH Y;

SELECT Y.*, LAG(SALARY) OVER(PARTITION BY DEPT ORDER BY NAME) PREV_EMPLOYEE_SALARY FROM YASH Y;


SELECT Y.*, MIN(SALARY) OVER(PARTITION BY DEPT ORDER BY NAME) MIN_SALARY, MAX(SALARY) OVER(PARTITION BY DEPT ORDER BY NAME) MAXIMUM_SALARY, SUM(SALARY) OVER(PARTITION BY DEPT ORDER BY NAME) SUM_SALARY FROM YASH Y;

CREATE TABLE INTERVIEW_QUESTIONS.YASH_TECHNOLOGY.JOB_TITLE(JOB_TITLE VARCHAR);

INSERT INTO INTERVIEW_QUESTIONS.YASH_TECHNOLOGY.JOB_TITLE VALUES('ENGG'),('TEACHER'),('CLERCK'),('DOCTOR');

SELECT * FROM INTERVIEW_QUESTIONS.YASH_TECHNOLOGY.JOB_TITLE;
 
SELECT JOB_TITLE FROM INTERVIEW_QUESTIONS.YASH_TECHNOLOGY.JOB_TITLE ORDER BY  ( CASE WHEN JOB_TITLE='DOCTOR' THEN '1'
            WHEN JOB_TITLE='ENGG' THEN  '2'
            WHEN JOB_TITLE='TEACHER' THEN   '3'
            WHEN JOB_TITLE='CLERCK' THEN  '4'
            END);

select * from INTERVIEW_QUESTIONS.YASH_TECHNOLOGY.JOB_TITLE;


########## AMBLICS INTERVIEW QUESTIONS #################### 

---- stored procedure counting of no_of_rows and no_of_columns in a table ----

create or replace Test_proc(P_DATABASE varchar, P_SCHEMA varchar, P_TABLE varchar)
RETURN STRING NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCAHR;
SELECT_COLUMN VARCAHR;
BEGIN
SELECT_STATEMENT:='SELECT COUNT(*) FROM '':P_DATABASE''||.||'':P_SCHEMA''||.||'':P_TABLE''';
SELECT_COLUMN='SELECT COUNT(*) FROM '':P_DATABASE''.||''INFORMATION_SCHEMA.COLUMNS ''||WHERE TABLE_NAME='':P_TABLE''';
EXECUTE IMMEDIATE :SELECT_STATEMENT;
EXECUTE IMMEDIATE :SELECT_COLUMN;
RETURN 'DONE'
END;
$$;

CREATE OR REPLACE SEQUENCE INTERVIEW_QUESTIONS.AMBLICS.SEQUENCE_SAMPLE START = 1 INCREMENT = 2;
SELECT INTERVIEW_QUESTIONS.AMBLICS.SEQUENCE_SAMPLE.NEXTVAL;
CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.AMBLICS.SEQUENCE_SAMPLE_TABLE (I INTEGER);
INSERT INTO INTERVIEW_QUESTIONS.AMBLICS.SEQUENCE_SAMPLE_TABLE (I) VALUES (INTERVIEW_QUESTIONS.AMBLICS.SEQUENCE_SAMPLE.NEXTVAL);
SELECT I FROM INTERVIEW_QUESTIONS.AMBLICS.SEQUENCE_SAMPLE_TABLE;

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.AMBLICS.PURCHASE_ORDERS (
REGION VARCHAR, DEPT INT, PART_NO VARCHAR, COUNTRY VARCHAR, ORDER_DATE varchar, AMOUNT INT
);

SELECT CURRENT_DATE();

ALTER TABLE INTERVIEW_QUESTIONS.AMBLICS.PURCHASE_ORDERS MODIFY COLUMN ORDER_DATE 
SET TO_DATE(ORDER_DATE,'DD-MM_YYYY') :: DATE;

INSERT INTO INTERVIEW_QUESTIONS.AMBLICS.PURCHASE_ORDERS (REGION, DEPT, PART_NO, COUNTRY, ORDER_DATE, AMOUNT)
VALUES ('Asia','101', '4321b','INDIA','19-02-2015','45000'),
('EUROPE','213','4579b', 'ITALY', '05-06-2015', '120000'),
('EUROPE','205','3752b','FRANCE','03-01-2015','65000'),
('AMERICA','502','5874b','US','16-10-2015', '89000'),
('EUROPE','213','7521b','GERMANY','27-09-2015','74600'),
('ASIA','101','3254a','JAPAN','08-11-2015','103000');


SHOW TABLES JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD;

SELECT TABLE_NAME, IS_CLONE FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_NAME = 'JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD';

SELECT
  table_name
FROM
  information_schema.tables
WHERE
  table_name = 'JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD';

SHOW CLONE HISTORY FOR TABLE DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD;

SHOW GRANTS of ROLE ACCOUNTADMIN;

SHOW GRANTS TO ROLE ACCOUNTADMIN;

SHOW GRANTS to USER BASHEER;

SHOW GRANTS TO ROLE ACCOUNTADMIN;

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS(
ID INT,
EMPLOYEE_NAME VARCHAR,
EMPLOYEE_ID INT,
CATEGORY_ID INT
);


INSERT INTO INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS (ID, EMPLOYEE_NAME, EMPLOYEE_ID, CATEGORY_ID) 
VALUES ('1', 'Mark', '4', '4'),
('2', 'Alice', '1', '1'),
('3', 'Williams', '2', '3'),
('4', 'White', '5', '1'),
('5', 'Davis', '3', '1'),
('6', 'Jones', '2', '3');


SELECT E.EMPLOYEE_NAME AS EMPLOYER, C.EMPLOYEE_NAME AS CATEGORY FROM SALARY_FOR_JOINS E LEFT JOIN SALARY_FOR_JOINS C ON C.ID = E.CATEGORY_ID;

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.AMBLICS.STUDENT (
NAME VARCHAR,
ID INT
);

INSERT INTO INTERVIEW_QUESTIONS.AMBLICS.STUDENT (NAME, ID) VALUES
('Alice', '1450'),
('Ben', '2321'),
('Lisa', '3102'),
('John', '4231'),
('Anita', '5563');

SELECT * FROM STUDENT WHERE NAME LIKE 'A%a';

SELECT * FROM STUDENT WHERE NAME LIKE 'A%' AND 
NAME LIKE '%a';

SELECT * FROM STUDENT WHERE NAME LIKE 'A%' and '%a';

---IN AMBLICS INTERVIEW QUESTIONS QUESTION 9 OPTION 3 IS CORRECT REGARDING SHARES
---IN AMBLICS INTERVIEW QUESTIONS QUESTION 19 STARSCHEMA IS CORRECT
---IN AMBLICS INTERVIEW QUESTIONS QUESTION 16 COMPARISION BW ETL AND ELT (FLEXIBLITY) IS CORRECT


CREATE OR REPLACE TABLE SALARY_SALARY_OUTPUT_TABLE(
SALARY1 INT, SALARY2 INT
);

INSERT INTO INTERVIEW_QUESTIONS.AMBLICS.SALARY_SALARY_OUTPUT_TABLE
(SALARY1, SALARY2) 
VALUES
('100', '200'),
('200', '100'),
('105', '111'),
('150', '300'),
('210', '350'),
('200', '100');

SELECT SALARY1, SALARY2, (SELECT MAX(SALARY1) OUTPUT FROM SALARY_SALARY_OUTPUT_TABLE) OUTPUT FROM SALARY_SALARY_OUTPUT_TABLE;


CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT
(ID INT, AMOUNT INT);

INSERT INTO INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT (ID, AMOUNT)
VALUES ('11', '10'),
('12', '5'),
('13', '20'),
('11', '15'),
('12', '1'),
('14', '30');

----SELECT ID, AMOUNT, (SELECT MIN(AMOUNT) FROM ID_AMOUNT_OUTPUT GROUP BY ID) OUTPUT FROM ID_AMOUNT_OUTPUT;
----ABOVE SYNTAX NOT WORKING

SELECT ID, AMOUNT, MIN(AMOUNT) OVER(PARTITION BY ID) OUTPUT FROM ID_AMOUNT_OUTPUT;

---- QUESTIONS RELATED TO CREATING MASKING POLICY ----
---- QUESTIONS RELATED TO CREATING CLONE OBJECT USING AT(OFFSET, TIMESTAMP)----

################### CAPGEMINI INTERVIEW QUESTIONS #########################

CREATE OR REPLACE SCHEMA INTERVIEW_QUESTIONS.CAPGEMINI;

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES(
PRODUCT_ID INT, UNITS_SOLD INT, TOTAL_SALES FLOAT, COGS FLOAT, MANUFACTURER VARCHAR, DRUG VARCHAR
);

INSERT INTO INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES (PRODUCT_ID, UNITS_SOLD, TOTAL_SALES, COGS, MANUFACTURER, DRUG)
VALUES ('9', '37410', '293452.54', '208876.01', 'Eli Lilly', 'Zyprexa'),
('34', '94698', '600997.19', '521182.16', 'AstraZeneca', 'Surmontil'),
('61', '77023', '500101.61', '419174.97', 'Biogen', 'Varicose Relief'),
('136', '144814', '1084258', '1006447.73', 'Biogen', 'Burkhart');

SELECT DRUG, (TOTAL_SALES - COGS) AS TOTAL_PROFIT FROM INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES 
ORDER BY TOTAL_PROFIT DESC
LIMIT 3;

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.CAPGEMINI.ORDERS (
ORD_NO INT, PURCH_AMT FLOAT, ORD_DATE DATE, CUSTOMER_ID INT, SALESMAN_ID INT 
);

INSERT INTO INTERVIEW_QUESTIONS.CAPGEMINI.ORDERS
(ORD_NO, PURCH_AMT, ORD_DATE, CUSTOMER_ID, SALESMAN_ID)
VALUES ('70001', '150.5', '2012-10-05', '3005', '5002'),
('70009', '270.65', '2012-09-10', '3001', '5005'),
('70002', '65.26', '2012-10-05', '3002', '5001'),
('70004', '110.5', '2012-08-17', '3009', '5003'),
('70007', '948.5', '2012-09-10', '3005', '5002'),
('70005', '2400.6', '2012-07-27', '3007', '5001'),
('70008', '5760', '2012-09-10', '3002', '5001'),
('70010', '1983.43', '2012-10-10', '3004', '5006'),
('70003', '2480.4', '2012-10-10', '3009', '5003'),
('70012', '250.45', '2012-06-27', '3008', '5002'),
('70011', '75.29', '2012-08-17', '3003', '5007'),
('70013', '3045.6', '2012-04-25', '3002', '5001');

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.CAPGEMINI.CUSTOMER (
CUST_ID INT, CUST_NAME VARCHAR, CITY VARCHAR, GRADE INT, SALESMAN_ID INT
);

INSERT INTO INTERVIEW_QUESTIONS.CAPGEMINI.CUSTOMER (CUST_ID, CUST_NAME, CITY, GRADE, SALESMAN_ID)
VALUES ('3002', 'Nick Rimando', 'New York', '100', '5001'),
('3007', 'Brad Davis', 'New York', '200', '5001'),
('3005', 'Graham Zusi', 'California', '200', '5002'),
('3008', 'Julian Green', 'London', '300', '5002'),
('3004', 'Fabian Johnson', 'Paris', '300', '5006'),
('3009', 'Geoff Cameron', 'Berlin', '100', '5003'), 
('3003', 'Jozy Altidar', 'Moscow', '200', '5007'),
('3001', 'Brad Guzan', 'London','0' , '5005');

SELECT O.ORD_NO, O.PURCH_AMT, C.CUST_NAME, C.CITY FROM INTERVIEW_QUESTIONS.CAPGEMINI.ORDERS O 
INNER JOIN INTERVIEW_QUESTIONS.CAPGEMINI.CUSTOMER C ON O.CUSTOMER_ID = C.CUST_ID 
WHERE O.PURCH_AMT BETWEEN 500 AND 2000;

############ mPHASIS INTERVIEW QUESTIONS ##############

---QUESTIONS ON CREATING OF MASKING POLICY

CREATE OR REPLACE MASKING POLICY SALARY_MASK2 
AS (SAL INT) RETURNS INT ->
CASE 
WHEN CURRENT_ROLE() IN ('SYSADMIN','SECURITYADMIN') THEN SAL
ELSE '0000'
END;

ALTER TABLE EMPLOYEE2 MODIFY COLUMN SALARY 
SET MASKING POLICY SALARY_MASK2;

########### RUMANGO INTERVIEW QUESTIONS ###############

---QUESTIONS ON CREATIN STREAMS AND TASKS

########### VOLKSWAGEN INTERVIEW QUESTIONS ############

CREATE OR REPLACE SCHEMA INTERVIEW_QUESTIONS.VOLKSWAGEN;

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL(
STU_ROLL VARCHAR, STU_NAME VARCHAR, STU_PHNO INT, STU_CLASS VARCHAR, STU_CLASS_TEACHER VARCHAR
);

--Create new Student Table and this contains Stu_Roll, Stu_Name, Stu_PhNo,
--Question:feed from School table and Give me Student record with name anything Vishal studying in Class 7.


CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL1 AS
SELECT STU_ROLL, STU_NAME, STU_PHNO FROM INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL
WHERE STU_NAME LIKE '%VISHAL%' AND STU_CLASS = '7';

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.VOLKSWAGEN.CLASS(
STU_ROLL VARCHAR, STU_CLASSTEACHER VARCHAR, STU_SECTION VARCHAR
);

--- Give me all Vishal studying in Class 7th and Section D give me Stu_Roll,Stu_Name, Stu_PhNo, Stu_Class, Stu_Section, Stu_ClassTeacher

SELECT S.STU_ROLL, S.STU_NAME, S.STU_PHNO, S.STU_CLASS, C.STU_SECTION, C.STU_CLASSTEACHER FROM SCHOOL S
INNER JOIN CLASS C ON C.STU_ROLL = S.STU_ROLL WHERE S.STU_NAME LIKE '%VISHAL%' AND S.STU_CLASS LIKE '7' AND 
C.STU_SECTION LIKE 'D';

------ QUESTION RELATED TO  CREATING CSV OR JSON FILE_FORMAT IN SNOWFLAKE ------

############ TURING INTERVIEW QUESTIONS #############

CREATE OR REPLACE SCHEMA INTERVIEW_QUESTIONS.TURING;

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.TURING.EMPLOYEE (ROLL_NO INT);

INSERT INTO INTERVIEW_QUESTIONS.TURING.EMPLOYEE (ROLL_NO) VALUES
('1001'),
('1002'),
('1003'),
('1004'),
('1005');

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE(ROLL_NO INT);

INSERT INTO INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE (ROLL_NO)
VALUES ('1001'),
('1002'),
('1002'),
('1007'),
('1006'),
('1005');

SELECT * FROM INTERVIEW_QUESTIONS.TURING.EMPLOYEE 
EXCEPT
SELECT * FROM INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE;

CREATE OR REPLACE TABLE EMPLOYEE_SALARY_TABLE (
EMP_ID INT,
EMP_NAME VARCHAR,
DEPT VARCHAR,
SALARY INT
);

INSERT INTO INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE (EMP_ID, EMP_NAME, DEPT, SALARY)
VALUES ('1001','BOB', 'Sales', '10000'),
('1002', 'Abitom', 'Finance', '20000'),
('1003', 'Jim', 'Sales', '14000'),
('1004', 'Preston', 'IT', '16000'),
('1005', 'Victoria', 'Finance', '11000'),
('1006', 'Allen', 'IT', '14000'),
('1007', 'Sam', 'Finance', '10000'),
('1008', 'Cole', 'IT', '12000'),
('1009', 'Jerry', 'Sales', '14000'),
('1010', 'Thiery', 'Sales', '11000');

SELECT EMP_ID, DEPT, FIFTH_HIGHEST_SALARY FROM 
(SELECT E.*, DENSE_RANK() OVER(ORDER BY SALARY) FIFTH_HIGHEST_SALARY FROM EMPLOYEE_SALARY_TABLE E) X
WHERE X.FIFTH_HIGHEST_SALARY = 5;

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.TURING.CUSTOMER (CUSTOMER_ID INT, CUSTOMER_NAME VARCHAR,
ADDRESS VARCHAR, 
CITY VARCHAR,
STATE VARCHAR,
ZIP_CODE INT);

INSERT INTO INTERVIEW_QUESTIONS.TURING.CUSTOMER (CUSTOMER_ID, CUSTOMER_NAME, ADDRESS, CITY, STATE, ZIP_CODE)
VALUES
('1001', 'John', '1-2', 'ABC', 'New York', '096421'),
('1002', 'Abraham', '1-3', 'DEF', 'Texas', '283572'),
('1003', 'Devil', '1-4', 'GHI', 'Arizona', '382691'),
('1004', 'Basheer', '76-97', 'Kurnool', 'Andhra', '518003'),
('1005', 'Shoib', '2-6', 'Habeeb', 'Multan', '425678'),
('1006', 'Flintoff', '2-7', 'Leone', 'Arizona', '125678');

SELECT * FROM INTERVIEW_QUESTIONS.TURING.CUSTOMER;


UPDATE INTERVIEW_QUESTIONS.TURING.CUSTOMER SET STATE = (CASE WHEN  STATE = 'New York' THEN 'Texas'
                                                             WHEN  STATE = 'Texas' THEN 'New York'
                                                             WHEN  STATE = 'Arizona' THEN 'Alaska'
                                                             else STATE
                                                             END);


CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.TURING.EMPLOYEE2(
EMP_ID INT, EMP_NAME VARCHAR, DEPARTMENT VARCHAR, SALARY INT
);

SELECT DEPARTMENT, COUNT(EMP_ID) AS TOTAL_EMPLOYEES FROM EMPLOYEE2 
WHERE SALARY > 10000
GROUP BY DEPARTMENT 
HAVING TOTAL_EMPLOYEES > 1;

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.TURING.SALES(
SALES_ID INT, SALES_AMOUNT INT, TOTAL_PROFIT INT DEFAULT NULL
);

INSERT INTO INTERVIEW_QUESTIONS.TURING.SALES (SALES_ID, SALES_AMOUNT)
VALUES ('1', '109890'),
('2', '24566'),
('3', '568877'),
('4', '87566'),
('5', '16000');


SELECT * FROM INTERVIEW_QUESTIONS.TURING.SALES;

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.TURING.VENDOR(
VENDOR_ID INT, SALES_ID INT, PURCHASE_AMT INT
);

INSERT INTO INTERVIEW_QUESTIONS.TURING.VENDOR (VENDOR_ID, SALES_ID, PURCHASE_AMT)
VALUES ('11', '1', '99890'),
('12', '2', '12566'),
('13', '3', '367877'),
('14', '4', '80566'),
('15', '5', '14500');

SELECT * FROM INTERVIEW_QUESTIONS.TURING.VENDOR;

UPDATE SALES SET TOTAL_PROFIT = (S.SALES_AMOUNT - V.PURCHASE_AMT) 
FROM SALES S INNER JOIN VENDOR V ON V.SALES_ID = S.SALES_ID;

SELECT SALES_AMOUNT, PURCHASE_AMT, TOTAL_PROFIT FROM SALES S INNER JOIN VENDOR V ON S.SALES_ID = V.SALES_ID;

CREATE OR REPLACE TABLE INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE(
CUST_ID INT, CUST_NAME VARCHAR, CUST_CITY VARCHAR, INVOICE_ID INT, INVOICE_AMT INT
);

SELECT CUST_ID, CUST_NAME, INVOICE_ID FROM CUSTOMER_INVOICE 
WHERE INVOICE_AMT >= (SELECT AVG(INVOICE_AMT) FROM CUSTOMER_INVOICE);

Q.)) which clause is that aggregate function can be used in? and which clause is that can't be used it?
Ans.) GROUP BY, WHERE

Q.)) ----- CLAUSE GIVES THE CONDITION TO BE USED OVER THE TABLES BEING JOINED?
Ans.)  ON CLAUSE.

Q.))  anna always uses the best practice and execution plans to debug complex queries to check the actual 
      cost and time taken by the query execution. She wants to save this execution plan so she may use it 
      again, while saving this execution plan, in which extension will it get stored.
Ans.) .sqlplan

Q.)) angela is working on a complex requirement for which she has written a query. select empid, empname, 
     salary, rank() over (partition by department, order by salary) from employee. identify which operator 
     will be used for this query execution.
     a. segment operator
     b. assert operator
     c. Hash match operator
     d. Lazt spool operator
Ans.) C (Hash match operator)

SELECT * FROM DB_IBM_STG.SCH_IBM.EMPLOYEE;

SELECT DEPT_NAME, MAX(SALARY) OVER(PARTITION BY DEPT_NAME) MAX_SALARY FROM EMPLOYEE;

SELECT *, MIN(SALARY) OVER(PARTITION BY DEPT_NAME) MIN_SALARY FROM EMPLOYEE;

SELECT *, AVG(SALARY) OVER(PARTITION BY DEPT_NAME) AVG_SALARY FROM EMPLOYEE;

SELECT EMP_NAME, DEPT_NAME FROM (
SELECT E.*, ROW_NUMBER() OVER( PARTITION BY DEPT_NAME ORDER BY SALARY ASC) AS ROW_NUM FROM EMPLOYEE E
) X
WHERE X.ROW_NUM < 4;

SELECT EMP_NAME, DEPT_NAME, SALARY FROM 
(
SELECT E.*, DENSE_RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS DS_RANK FROM EMPLOYEE AS E
) X 
WHERE X.DS_RANK = 3;

https://bqtvhxh-khan.snowflakecomputing.com ----- KHAN READER ACCOUNT

https://bqtvhxh-shan.snowflakecomputing.com ----- SHAN READER ACCOUNT

SELECT * FROM (
SELECT E.*, LEAD(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) lag FROM EMPLOYEE E
) x
WHERE DEPT_NAME = 'IT';

SELECT DISTINCT DEPT_NAME, AVG(SALARY) OVER(PARTITION BY DEPT_NAME) AS AVG_SALARY FROM EMPLOYEE;

SELECT * FROM (
SELECT E.*, DENSE_RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) SECOND_HIGHESTSAL FROM EMPLOYEE E 
) X
WHERE X.SECOND_HIGHESTSAL = 3;

SELECT * FROM DB_IBM_STG.SCH_IBM.EMPLOYEE;

SELECT E.*, DENSE_RANK() OVER() FROM EMPLOYEE E;

SELECT E.*, MAX(SALARY) OVER(PARTITION BY DEPT_NAME) MAX_SALARY FROM EMPLOYEE E;

SELECT E.*, ROW_NUMBER() OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS RN FROM EMPLOYEE E;

SELECT * FROM DB_IBM_STG.SCH_IBM.EMPLOYEE;


SELECT EMP_ID, EMP_NAME, DEPT_NAME FROM (
             SELECT E.*, ROW_NUMBER() OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS RN FROM EMPLOYEE E
) X 
WHERE X.RN <3;

SELECT EMP_ID,EMP_NAME, DEPT_NAME, SALARY,SECOND_HIGHEST_SALARY, SECOND_LOWEST_SALARY FROM (
SELECT E.*, DENSE_RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY ASC) AS SECOND_LOWEST_SALARY, DENSE_RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) SECOND_HIGHEST_SALARY FROM EMPLOYEE E) X
WHERE X.SECOND_LOWEST_SALARY = 2 AND X.SECOND_LOWEST_SALARY = 2;

SELECT * FROM (
SELECT E.*, LEAD(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY SALARY ASC) NEXT_SALARY FROM EMPLOYEE E
) AS X 
WHERE
CASE WHEN X.SALARY < X.NEXT_SALARY THEN 'SALARY_LESSTHAN_NEXT_EMPLOY'
WHEN X.SALARY = X.NEXT_SALARY THEN 'SALARY_EQUAL_TO_NEXTEMPLOYEE'
ELSE 'SALARY_GREATER_THAN_NEXT_EMPLOYEE'
END;


SELECT * FROM (
SELECT E.*, LEAD(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY SALARY ASC) NEXT_SALARY, 
CASE WHEN SALARY > NEXT_SALARY THEN 'SAL_GREATER_THAN_NEXT_EMP_SALARY' 
WHEN SALARY < NEXT_SALARY THEN 'SAL_LOWER_THAN_NEXT_EMP_SALARY' 
WHEN SALARY = NEXT_SALARY THEN 'SAL_EQUAL_TO_NEXT_EMP_SAL'END COMPARE_WITH_NEXT_EMP_SAL FROM EMPLOYEE E
) AS X 
WHERE
X.COMPARE_WITH_NEXT_EMP_SAL LIKE 'SAL_EQUAL_TO_NEXT_EMP_SAL';


