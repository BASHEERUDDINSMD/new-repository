GFDGFDHGFHGJHJGHJHGKJHKN54656877987

USE DATABASE DB_INTERVIEW_QUESTIONS;
USE SCHEMA DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE";
SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS;

DELETE FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS
WHERE ID NOT IN (
SELECT MIN(ID) FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS
GROUP BY MODEL, BRAND);

SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS;

SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS2;

CREATE OR REPLACE TABLE CARS_DUPLICATE AS
SELECT DISTINCT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS2;

SELECT * FROM CARS_DUPLICATE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES;

SELECT DRUG, (TOTAL_SALES - COGS) PROFIT FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES
ORDER BY PROFIT DESC
LIMIT 3;

SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.ORDERS;

SELECT O.ORD_NO, O.PURCH_AMT, C.CUST_NAME, C.CITY FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.ORDERS O 
INNER JOIN DB_INTERVIEW_QUESTIONS.CAPGEMINI.CUSTOMER C 
WEHRE O.PURCH_AMT BETWEEN 500 AND 2000;


TRUNCATE TABLE DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS2;

SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS2;

INSERT INTO DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS2
SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_DUPLICATE;

USE SCHEMA YASH_TECHNOLOGIES;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.JOB_TITLE
ORDER BY 
CASE WHEN JOB_TITLE = 'DOCTOR' THEN '1'
WHEN JOB_TITLE = 'ENGG' THEN '2'
WHEN JOB_TITLE = 'TEACHER' THEN '3'
WHEN JOB_TITLE = 'CLERCK' THEN '4' --(OR) ELSE '4'
END;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.INFORMATION;

SELECT SCHEMA_NAME, TABLE_NAME, LISTAGG('COLUMN_NAME', ',') FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.INFORMATION
GROUP BY SCHEMA_NAME, TABLE_NAME;

SELECT COUNT(*) FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABA A 
CROSS JOIN DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABB B;

SELECT COUNT(*) FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABB A  
JOIN DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABB B 
ON A.IB = B.IB;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

SELECT  DEPT, MAX(SALARY) FROM YASH
GROUP BY DEPT;

SELECT *, MAX(SALARY) OVER(PARTITION BY DEPT) HIGHEEST_SALARY FROM YASH;

SELECT *, MIN(SALARY) OVER(PARTITION BY DEPT) LOWEST_SALARY FROM YASH;

SELECT *, AVG(SALARY) OVER(PARTITION BY DEPT) AVG_SALARY_IN_EACH_DEPT FROM YASH;

SELECT *, SUM(SALARY) OVER(PARTITION BY DEPT) TOTAL_AMOUNT_AS_SALARY FROM YASH;

SELECT *, COUNT(SALARY) OVER(PARTITION BY DEPT) TOTAL_SALARIES FROM YASH;

SELECT *, LEAD(SALARY) OVER(PARTITION BY DEPT ORDER BY NAME) NEXT_EMP_SALARY FROM YASH;
SELECT *, LAG(SALARY) OVER(PARTITION BY DEPT ORDER BY NAME) PREVIOUS_EMP_SALARY FROM YASH;

SELECT T.NAME, T.DEPT, T.SALARY FROM 
(SELECT Y.*, ROW_NUMBER() OVER(PARTITION BY Y.DEPT ORDER BY name) SECOND_JOINED_EMPLOYEE FROM YASH Y) T
WHERE SECOND_JOINED_EMPLOYEE = 2;

SELECT T.NAME, T.DEPT, T.SALARY FROM 
(SELECT Y.*, DENSE_RANK() OVER(PARTITION BY Y.DEPT ORDER BY SALARY DESC) SECOND_HIGHEST_SAL FROM YASH Y) T
WHERE T.SECOND_HIGHEST_SAL =2;

SELECT T.NAME, T.DEPT, T.SALARY FROM 
(SELECT Y.*, DENSE_RANK() OVER(PARTITION BY DEPT ORDER BY SALARY ASC) LOWEST_SECONDLOWEST_SALARY FROM YASH Y) T
WHERE T.LOWEST_SECONDLOWEST_SALARY <= '2';

SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.CLASS;
SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL;

DROP TABLE STUDENT;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.STUDENT 
AS
SELECT STU_ROLL, STU_NAME, STU_PHNO FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL
WHERE STU_NAME LIKE '%VISHAL%'
AND STU_CLASS LIKE '7';

SELECT S.STU_ROLL,S.STU_NAME, S.STU_CLASS, S.STU_PHNO, S.STU_CLASS, C.STU_SECTION, C.STU_CLASSTEACHER 
FROM SCHOOL S 
INNER JOIN CLASS C 
ON S.STU_ROLL = C.STU_ROLL 
WHERE S.STU_NAME LIKE '%VISHAL%'
AND C.STU_SECTION LIKE 'D'
AND S.STU_CLASS LIKE '7';

CREATE OR REPLACE PROCEDURE DB_INTERVIEW_QUESTIONS.AMBLICS."COUNT NO OF ROWS"(P_DATABASE VARCHAR, P_SCHEMA VARCHAR, P_TABLE VARCHAR)
RETURNS TABLE(TOTAL_ROWS INT)
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'SELECT COUNT(*) FROM ' ||:P_DATABASE||'.'||:P_SCHEMA||'.'||:P_TABLE;
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN TABLE(RES);
END;
$$;

CALL DB_INTERVIEW_QUESTIONS.AMBLICS."COUNT NO OF ROWS"('DB_INTERVIEW_QUESTIONS', 'YASH_TECHNOLOGIES', 'YASH');
CALL DB_INTERVIEW_QUESTIONS.AMBLICS."COUNT NO OF ROWS"('DB_INTERVIEW_QUESTIONS', 'VIRTUSA', 'COUNTRY_MEDALS_TABLE');

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_SALARY_OUTPUT_TABLE;

SELECT T.SALARY1, T.SALARY2, (SELECT MAX(SALARY1) FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_SALARY_OUTPUT_TABLE Y) OUTPUT
FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_SALARY_OUTPUT_TABLE T;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS;
SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.PURCHASE_ORDERS;
SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT;

SELECT ID, AMOUNT, MIN(AMOUNT) OVER(PARTITION BY ID) OUTPUT FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT;

SELECT * FROM DB_CUSTOMER.SCH_CUSTOMER.WEB_UI_CUSTOMER;

CREATE OR REPLACE MASKING POLICY MP_C_MKTSEGMENT_CUSTTABLE
AS
(SECURE VARCHAR) RETURNS VARCHAR
->
CASE 
WHEN CURRENT_ROLE() IN ('SYSADMIN') THEN 'SECURE'
ELSE '******'
END;

DROP MASKING POLICY MP_C_MKTSEGMENT_CUSTTABLE;DB_CUSTOMER.SCH_CUSTOMER.BULK_LOAD_CUSTOMER

ALTER TABLE DB_CUSTOMER.SCH_CUSTOMER.WEB_UI_CUSTOMER MODIFY COLUMN C_MKTSEGMENT
SET MASKING POLICY DB_INTERVIEW_QUESTIONS.AMBLICS.MP_C_MKTSEGMENT_CUSTTABLE;

SELECT * FROM DB_CUSTOMER.SCH_CUSTOMER.WEB_UI_CUSTOMER;

SELECT * FROM DB_CUSTOMER.SCH_CUSTOMER.INTERNAL_STG_CUSTOMER;

CREATE OR REPLACE MASKING POLICY MP
AS 
(COLUMN_NAME VARCHAR) RETURNS VARCHAR
->
CASE WHEN CURRENT_ROLE() IN ('SYSADMIN') THEN 'VARCHAR'
ELSE '*****'
END;

ALTER TABLE DB_CUSTOMER.SCH_CUSTOMER.INTERNAL_STG_CUSTOMER
MODIFY COLUMN C_MKTSEGMENT 
SET MASKING POLICY MP;

SELECT * FROM DB_CUSTOMER.SCH_CUSTOMER.INTERNAL_STG_CUSTOMER;

SELECT GET_DDL('TABLE','DB_CUSTOMER.SCH_CUSTOMER.INTERNAL_STG_CUSTOMER');

CREATE OR REPLACE MASKING POLICY MP_ON_TABLE
AS
(C_PHONE VARCHAR) RETURNS VARCHAR
->
CASE 
WHEN CURRENT_ROLE() IN ('SYSADMIN') THEN C_PHONE
ELSE '****'
END;

ALTER TABLE DB_CUSTOMER.SCH_CUSTOMER.INTERNAL_STG_CUSTOMER
MODIFY COLUMN C_PHONE
SET MASKING POLICY MP_ON_TABLE;

SELECT * FROM DB_CUSTOMER.SCH_CUSTOMER.INTERNAL_STG_CUSTOMER;


CREATE OR REPLACE MASKING POLICY MP_C_NATIONKEY
AS
(ID NUMBER) RETURNS NUMBER
->
CASE
WHEN 
CURRENT_ROLE() IN ('SYSADMIN') THEN ID
ELSE '0000'
END;

ALTER TABLE DB_CUSTOMER.SCH_CUSTOMER.INTERNAL_STG_CUSTOMER
MODIFY COLUMN C_NATIONKEY
SET MASKING POLICY MP_C_NATIONKEY;

SELECT * FROM DB_CUSTOMER.SCH_CUSTOMER.INTERNAL_STG_CUSTOMER;

WITH CCTE AS 
(SELECT * FROM DB_CUSTOMER.SCH_CUSTOMER.INTERNAL_STG_CUSTOMER)
SELECT * FROM CCTE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

WITH CTE AS
(SELECT *, (CASE WHEN SALARY > '7000' THEN 'EXECUTIVE'
ELSE 'LEGISLATIVE' END) DESIGNATION FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH)
SELECT * FROM CTE 
WHERE DESIGNATION = 'LEGISLATIVE';

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT
WHERE NAME LIKE 'A%'
and NAME LIKE '%a';

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS;

SELECT E.EMPLOYEE_NAME T, C.EMPLOYEE_NAME R FROM SALARY_FOR_JOINS E INNER JOIN SALARY_FOR_JOINS C 
ON E.CATEGORY_ID = C.ID ;

SELECT DRUG, (TOTAL_SALES - COGS) TOTAL_PROFIT FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES
ORDER BY TOTAL_PROFIT DESC
LIMIT 3;

SELECT O.ORD_NO, O.PURCH_AMT, C.CUST_NAME, C.CITY FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.ORDERS O
INNER JOIN DB_INTERVIEW_QUESTIONS.CAPGEMINI.CUSTOMER C
WHERE O.PURCH_AMT BETWEEN 500 AND 2000;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE;
SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE
INTERSECT
SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE;

SELECT X.EMP_ID, X.DEPT, X.SALARY FROM 
(SELECT *, DENSE_RANK() OVER(ORDER BY SALARY ASC) FIFTH_LOWEST_SALARY FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE) X
WHERE X.FIFTH_LOWEST_SALARY = '5';

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER;

UPDATE DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER
SET STATE =
(CASE WHEN STATE = 'New York' THEN 'Texas'
WHEN STATE = 'Texas' THEN 'New York'
WHEN STATE = 'Arizona' THEN 'Alaska'
ELSE STATE
END);

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER;
SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CLN_CUSTOMER;

CREATE OR REPLACE TABLE CLN_CUSTOMER CLONE DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER;
DROP TABLE CLN_CUSTOMER;
CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.TURING.CLN_CUSTOMER CLONE DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2;

SELECT DEPARTMENT, COUNT(EMP_ID) TOTAL_NUMBER_OF_EMPLOYEES FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2
WHERE SALARY > 10000
GROUP BY DEPARTMENT
HAVING TOTAL_NUMBER_OF_EMPLOYEES > 1;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.SALES;
SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.VENDOR;

UPDATE DB_INTERVIEW_QUESTIONS.TURING.SALES
SET TOTAL_PROFIT = (S.SALES_AMOUNT - V.PURCHASE_AMT)
FROM SALES S INNER JOIN VENDOR V ON V.SALES_ID = S.SALES_ID;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.SALES;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE;

SELECT CUST_ID, CUST_NAME, INVOICE_ID, INVOICE_AMT 
FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE
WHERE INVOICE_AMT >= (SELECT AVG(INVOICE_AMT) FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE);

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_TABLE_FOR_CLUSTERING
(EMP_ID INT, EMP_NAME VARCHAR, SALARY INT, STATE VARCHAR, CITY VARCHAR)
CLUSTER BY (STATE, CITY);

SELECT GET_DDL('TABLE', 'DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_TABLE_FOR_CLUSTERING');

ALTER TABLE DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_TABLE_FOR_CLUSTERING CLUSTER BY (SALARY, CITY);

ALTER TABLE DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_TABLE_FOR_CLUSTERING ADD  PRIMARY KEY (EMP_ID);
ALTER TABLE DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_TABLE_FOR_CLUSTERING DROP PRIMARY KEY;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.ADDING_FIRST_MIDDLE_LAST_NAME;

SELECT ID, INITCAP(FIRST_NAME)||' '||INITCAP(MIDDLE_NAME)||' '||INITCAP(LAST_NAME) "FULL NAME" FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.ADDING_FIRST_MIDDLE_LAST_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS;
SELECT MAX(COL) FROM 
(
SELECT A COL FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS
UNION ALL 
SELECT B FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS
UNION ALL
SELECT C FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS
);

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200;
SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T;
SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_TT;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD;

SELECT *EXCLUDE(RN) FROM (
SELECT E.*, ROW_NUMBER() OVER(ORDER BY ID) RN FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD E) C
WHERE C.RN <= 5;

SELECT * FROM TEST;

SELECT SUM(POSITIVE_SUM) POSITIVE_TOTAL, SUM(NEGATIVE_SUM) NEGATIVE_TOTAL FROM 
(
SELECT CASE WHEN AMOUNT > 0 THEN AMOUNT ELSE '0' END POSITIVE_SUM, 
CASE WHEN AMOUNT <= 0 THEN AMOUNT ELSE 0 END NEGATIVE_SUM FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.TEST);

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.ADDING_FIRST_MIDDLE_LAST_NAME;

SELECT ID, UPPER(FIRST_NAME)||' '||UPPER(MIDDLE_NAME)||' '||INITCAP(LAST_NAME) FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.ADDING_FIRST_MIDDLE_LAST_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS;

SELECT MAX(COL) FROM (
SELECT A COL FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS
UNION ALL
SELECT B FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS
UNION ALL 
SELECT C FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS) ;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."BUS BOOKING STATUS";

SELECT *, CASE WHEN TOTAL_SEATS = SEATS_SOLD THEN 'SEATS ARE FULL'
               WHEN TOTAL_SEATS < SEATS_SOLD THEN 'OVER BOOKED'
               WHEN TOTAL_SEATS - SEATS_SOLD <= 10 THEN 'HURRY_UP LIMITED SEATS AVAILABLE'
               ELSE 'SEATS ARE AVAILABLE'
               END BOOKING_STATUS 
    FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."BUS BOOKING STATUS";

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200;
WITH CTE AS (
SELECT A COL FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200
UNION ALL 
SELECT B FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200
UNION ALL 
SELECT C FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200)
SELECT COL, COUNT(COL) TOTAL_NO_EACH_VALUE FROM CTE
GROUP BY COL;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD;

SELECT * FROM SAMPLE_DB.SAMPLE_SCH.SAMPLE_TABLE;
SELECT *EXCLUDE(RN) FROM 
(SELECT *, ROW_NUMBER() OVER(ORDER BY C_PHONE) RN FROM SAMPLE_DB.SAMPLE_SCH.SAMPLE_TABLE) X
WHERE RN <= '500';

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS";

SELECT COL, COUNT(COL) FROM (
SELECT COL1 COL FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS"
UNION ALL 
SELECT COL2 FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS"
UNION ALL
SELECT COL3 FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS"
UNION ALL 
SELECT COL4 FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS")
GROUP BY COL
ORDER BY COL;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SEPERATION_OF_INR500;

SELECT PRICE, REGEXP_REPLACE(PRICE, '[A-Z ]') FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SEPERATION_OF_INR500;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SPLITTING_OF_NAME;

SELECT NAME, REGEXP_INSTR(NAME, ' ') FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SPLITTING_OF_NAME;

SELECT NAME, REGEXP_INSTR(NAME, ' ') FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SPLITTING_OF_NAME P, REGEXP_REPLACE(NAME, '1', 'P-1') FIRST_NAME, REGEXP_REPLACE(NAME, 'P+1') LAST_NAME FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SPLITTING_OF_NAME ;

SELECT NAME, SUBSTR(NAME,REGEXP_INSTR(NAME, ' ')+1) SUR_NAME, SUBSTR(NAME, '1', REGEXP_INSTR(NAME, ' ')-1) ACTUAL_NAME FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SPLITTING_OF_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.TEST;

SELECT SUM(POSITIVE_AMT) POSITIVE_SUM , SUM(NEGATIVE_AMT) NEGATIVE_SUM FROM (
SELECT CASE WHEN AMOUNT > 0 THEN AMOUNT ELSE 0 END POSITIVE_AMT, 
CASE WHEN AMOUNT <= 0 THEN AMOUNT ELSE 0 END NEGATIVE_AMT 
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.TEST);

SELECT * FROM DB_INTERVIEW_QUESTIONS.TCS.CITY;

SELECT NAME FROM DB_INTERVIEW_QUESTIONS.TCS.CITY
LIMIT 4
OFFSET 1;

SELECT X.NAME FROM (
SELECT *, ROW_NUMBER() OVER(ORDER BY NAME) RN FROM DB_INTERVIEW_QUESTIONS.TCS.CITY
) X
WHERE X.RN = 7;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TCS.TABLEA;

SELECT * FROM DB_INTERVIEW_QUESTIONS.VIRTUSA.COUNTRY_MEDALS_TABLE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.VIRTUSA.COUNTRY_MEDALS_TABLE
ORDER BY CASE WHEN COUNTRY = 'INDIA' THEN 1 
WHEN COUNTRY = 'CHINA' THEN 2 
WHEN COUNTRY = 'JAPAN' THEN 3 
WHEN COUNTRY = 'AUSTRALIA' THEN 4 
END;

CREATE OR REPLACE DATABASE PRACTICE_DB;
CREATE OR REPLACE SCHEMA PRACTICE_DB.PRACTICE_SCH;
USE DATABASE PRACTICE_DB;
USE SCHEMA PRACTICE_SCH;

SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.CLASS;
SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL;

CREATE OR REPLACE TABLE CLASS 
AS
SELECT STU_ROLL, STU_NAME, STU_PHNO FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL
WHERE STU_NAME LIKE '%VISHAL%'
AND STU_CLASS LIKE '7' ;

SELECT * FROM CLASS;

SELECT S.STU_ROLL, S.STU_NAME, S.STU_PHNO, S.STU_CLASS, C.STU_SECTION, C.STU_CLASSTEACHER 
FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL S 
INNER JOIN DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.CLASS C 
ON  S.STU_ROLL = C.STU_ROLL 
WHERE S.STU_NAME LIKE '%VISHAL%'
AND S.STU_CLASS LIKE '7'
AND C.STU_SECTION LIKE 'D';

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.INFORMATION;

SELECT SCHEMA_NAME, TABLE_NAME, LISTAGG(COLUMN_NAME, ',') FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.INFORMATION
GROUP BY SCHEMA_NAME, TABLE_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.JOB_TITLE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.JOB_TITLE
ORDER BY CASE WHEN JOB_TITLE = 'TEACHER' THEN '1'
              WHEN JOB_TITLE = 'DOCTOR' THEN '2'
              WHEN JOB_TITLE = 'CLERCK' THEN '3'
              ELSE JOB_TITLE 
              END;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABB;

SELECT COUNT(*) FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABA A 
LEFT OUTER JOIN DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABB B 
ON A.ID = B.IB;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

SELECT *EXCLUDE(RN) FROM (
SELECT Y.*, ROW_NUMBER() OVER(PARTITION BY DEPT ORDER BY NAME) RN 
FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH Y) P
WHERE P.RN = '1'; 

SELECT *EXCLUDE(DR) FROM 
(
SELECT Y.*, DENSE_RANK() OVER(PARTITION BY DEPT ORDER BY SALARY DESC) DR FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH Y) P
WHERE P.DR = '2';

SELECT Y.*, LEAD(SALARY) OVER(PARTITION BY DEPT ORDER BY NAME) NEXT_SAL FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH Y;

SELECT Y.*, LAG(SALARY) OVER(PARTITION BY DEPT ORDER BY NAME) PREV_EMP_SAL FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH Y;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE;
SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE;

SELECT ROLL_NO FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE
WHERE ROLL_NO NOT IN (SELECT ROLL_NO FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE);

SELECT ROLL_NO FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE
EXCEPT
SELECT ROLL_NO FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2;

SELECT GET_DDL('TABLE', 'DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2');

create or replace TABLE DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2 (
	EMP_ID NUMBER(38,0) AUTOINCREMENT START 1001 INCREMENT 1 ,
	EMP_NAME VARCHAR(16777216),
	DEPARTMENT VARCHAR(16777216),
	SALARY NUMBER(38,0)
);

INSERT INTO DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2 (EMP_NAME, DEPARTMENT, SALARY)
SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2;

SELECT EMP_ID, DEPARTMENT, SALARY FROM (
SELECT E.*, DENSE_RANK() OVER(ORDER BY SALARY DESC) DR 
FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2 E) X 
WHERE DR = '4';

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER;

UPDATE DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER
SET STATE = CASE WHEN STATE = 'Texas' THEN 'NEWYORK'
                 WHEN STATE = 'New York' THEN 'Texas'
                 WHEN STATE = 'Alaska' THEN 'Andhra'
                 ELSE STATE
                 END;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE;


SELECT DEPT, COUNT(EMP_ID) TOTAL_EMPLOYEES 
FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE
WHERE SALARY > 10000
GROUP BY DEPT
HAVING TOTAL_EMPLOYEES > 1;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.SALES;

UPDATE DB_INTERVIEW_QUESTIONS.TURING.SALES
SET TOTAL_PROFIT = '0';

UPDATE DB_INTERVIEW_QUESTIONS.TURING.SALES
SET TOTAL_PROFIT = (SALES_AMOUNT - PURCHASE_AMT);

UPDATE DB_INTERVIEW_QUESTIONS.TURING.SALES
SET TOTAL_PROFIT = S.SALES_AMOUNT - V.PURCHASE_AMT FROM DB_INTERVIEW_QUESTIONS.TURING.SALES S
                    INNER JOIN DB_INTERVIEW_QUESTIONS.TURING.VENDOR V ON S.SALES_ID = V.SALES_ID;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE;

SELECT CUST_ID, CUST_NAME, CUST_CITY, INVOICE_ID FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE
WHERE INVOICE_AMT >= (SELECT AVG(INVOICE_AMT) FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE);

CREATE OR REPLACE TABLE EMPLOYEE2
(ID INT, NAME VARCHAR, GENDER VARCHAR, PHNO INT, CITY VARCHAR, STATE VARCHAR) 
CLUSTER BY (ID);

ALTER TABLE EMPLOYEE2 
CLUSTER BY (ID);

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CLN_CUSTOMER;

CREATE OR REPLACE MASKING POLICY MP_CUST
AS (TQ VARCHAR) RETURNS VARCHAR
-> 
CASE WHEN CURRENT_ROLE() IN ('ACCOUNTADMIN') THEN 'TQ'
ELSE '*****'
END;

ALTER TABLE DB_INTERVIEW_QUESTIONS.TURING.CLN_CUSTOMER 
MODIFY COLUMN ADDRESS 
SET MASKING POLICY MP_CUST;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CLN_CUSTOMER;

SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES;

SELECT DRUG, TOTAL_SALES - COGS TOTAL_PROFIT FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES
ORDER BY TOTAL_PROFIT DESC
LIMIT 3;

SELECT DRUG, TOTAL_PROFIT FROM (
SELECT *, TOTAL_SALES - COGS TOTAL_PROFIT, DENSE_RANK() OVER(ORDER BY TOTAL_PROFIT DESC) DR FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES) X
WHERE X.DR <= 3;

SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.ORDERS;

SELECT O.ORD_NO, O.PURCH_AMT, C.CUST_NAME, C.CITY FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.ORDERS O
INNER JOIN DB_INTERVIEW_QUESTIONS.CAPGEMINI.CUSTOMER C 
ON O.CUSTOMER_ID = C. CUST_ID 
WHERE O.PURCH_AMT BETWEEN 500 AND 2000;

CREATE OR REPLACE TABLE CULUMN_WITH_CURRENT_TIMESTAMP
(
ID INT AUTOINCREMENT START 10001 INCREMENT 1,
NAME VARCHAR,
TIMESTAMP DATETIME DEFAULT CURRENT_TIMESTAMP()
);

INSERT INTO CULUMN_WITH_CURRENT_TIMESTAMP
(NAME)
VALUES
('SHAIK'),
('MOHAMMED'),
(('BASHEERUDDIN'));

SELECT * FROM CULUMN_WITH_CURRENT_TIMESTAMP;

USE DATABASE DB_INTERVIEW_QUESTIONS;

CREATE SCHEMA TIGER_ANALYTICS;

USE SCHEMA TIGER_ANALYTICS;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.EMPLOYEE 
AS
SELECT * FROM
DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.EMPLOYEE;

SELECT EMP_ID FROM (
SELECT *, DENSE_RANK() OVER(PARTITION BY DEPT ORDER BY SALARY ASC) DR FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.EMPLOYEE) P
WHERE P.DR ='2';

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU
(STU_ID INT, STU_NAME VARCHAR, SUBJECT VARCHAR, MARKS INT);

INSERT INTO DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU
(STU_ID, STU_NAME, SUBJECT, MARKS)
VALUES
(1001, 'RAHIM', 'TELUGU', 65),
(1001, 'RAHIM', 'HINDI', 87),
(1001, 'RAHIM', 'ENGLISH', 60),
(1001, 'RAHIM', 'MATHS', 95),
(1001, 'RAHIM', 'SCIENCE', 90),
(1001, 'RAHIM', 'SOCIAL', 75),
(1002, 'RAM', 'TELUGU', 75),
(1002, 'RAM', 'HINDI', 65),
(1002, 'RAM', 'ENGLISH', 60),
(1002, 'RAM', 'MATHS', 85),
(1002, 'RAM', 'SCIENCE', 80),
(1002, 'RAM', 'SOCIAL', 75),
(1003, 'SINGH', 'TELUGU', 55),
(1003, 'SINGH', 'HINDI', 88),
(1003, 'SINGH', 'ENGLISH', 75),
(1003, 'SINGH', 'MATHS', 81),
(1003, 'SINGH', 'SCIENCE', 78),
(1003, 'SINGH', 'SOCIAL', 68),
(1004, 'STEPHEN', 'TELUGU', 69),
(1004, 'STEPHEN', 'HINDI', 58),
(1004, 'STEPHEN', 'ENGLISH', 75),
(1004, 'STEPHEN', 'MATHS', 88),
(1004, 'STEPHEN', 'SCIENCE', 82),
(1004, 'STEPHEN', 'SOCIAL', 63),
(1005, 'NAYAK', 'TELUGU', 55),
(1005, 'NAYAK', 'HINDI', 45),
(1005, 'NAYAK', 'ENGLISH', 35),
(1005, 'NAYAK', 'MATHS', 59),
(1005, 'NAYAK', 'SCIENCE', 55),
(1005, 'NAYAK', 'SOCIAL', 60),
(1006, 'SHAKIB', 'TELUGU', 58),
(1006, 'SHAKIB', 'HINDI', 88),
(1006, 'SHAKIB', 'ENGLISH', 65),
(1006, 'SHAKIB', 'MATHS', 78),
(1006, 'SHAKIB', 'SCIENCE', 79),
(1006, 'SHAKIB', 'SOCIAL', 65);

SELECT * FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU;

SELECT STU_ID, STU_NAME,  AVG(MARKS) AS AVG_MARKS 
FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU
GROUP BY STU_ID, STU_NAME
ORDER BY STU_ID;

SELECT DISTINCT STU_ID, STU_NAME, P.AVG_MARKS FROM
(
SELECT *, AVG(MARKS) OVER(PARTITION BY STU_ID ORDER BY STU_ID) AVG_MARKS FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU
) P ;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT;

SELECT ID, AMOUNT, (SELECT MAX(AMOUNT)  FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT) OUTPUT 
FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT;------WRONG NOT WORKS

SELECT ID, AMOUNT, MAX(AMOUNT) OVER(PARTITION BY ID ORDER BY ID) OUTPUT 
FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.PURCHASE_ORDERS;

ALTER TABLE INTERVIEW_QUESTIONS.AMBLICS.PURCHASE_ORDERS MODIFY COLUMN ORDER_DATE 
SET TO_DATE(ORDER_DATE,'DD-MM_YYYY') :: DATE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS;

SELECT E.EMPLOYEE_NAME EMPLOYER, C.EMPLOYEE_NAME CATEGORY 
FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS E
LEFT JOIN DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS C 
ON E.CATEGORY_ID = C.ID;

SELECT E.EMPLOYEE_NAME EMPLOYER, C.EMPLOYEE_NAME CATEGORY
FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS E
LEFT JOIN DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS C
ON E.ID = C.CATEGORY_ID;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_SALARY_OUTPUT_TABLE;

SELECT SALARY1, SALARY2, MAX(SALARY1) OVER() MAX_SALARY FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_SALARY_OUTPUT_TABLE;

SELECT SALARY1, SALARY2, (SELECT MAX(SALARY1) FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_SALARY_OUTPUT_TABLE) MAX_SAL
FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_SALARY_OUTPUT_TABLE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT;

SELECT NAME, ID FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT
WHERE NAME LIKE 'A%a';

SELECT NAME, ID FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT
WHERE NAME LIKE 'A%'
OR  NAME LIKE '%a';

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT;

CREATE OR REPLACE PROCEDURE AMBLICS_PROCEDURE(P_DB VARCHAR, P_SCH VARCHAR, P_TAB VARCHAR)
RETURNS TABLE(ID INT)
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'SELECT COUNT(*) FROM '||:P_DB||'.'||:P_SCH||'.'||:P_TAB;
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN TABLE(RES);
END;
$$;

CALL PRACTICE_DB.PRACTICE_SCH.AMBLICS_PROCEDURE('DB_INTERVIEW_QUESTIONS', 'TIGER_ANALYTICS', 'AVG_MARKS_OF_EACH_STU');

USE DATABASE DB_INTERVIEW_QUESTIONS;

CREATE OR REPLACE SCHEMA DB_INTERVIEW_QUESTIONS.DELOITTE;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.DELOITTE.SOURCE
(ID INT);

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.DELOITTE.TARGET
(ID INT);

INSERT INTO DB_INTERVIEW_QUESTIONS.DELOITTE.SOURCE
(ID)
VALUES
(1), (2), (3), (4), (5), (6);

INSERT INTO DB_INTERVIEW_QUESTIONS.DELOITTE.TARGET
(ID)
VALUES
(2), (3), (4), (5), (6), (7);


(SELECT ID FROM DB_INTERVIEW_QUESTIONS.DELOITTE.SOURCE
EXCEPT
SELECT ID FROM DB_INTERVIEW_QUESTIONS.DELOITTE.TARGET)
UNION
(SELECT ID FROM DB_INTERVIEW_QUESTIONS.DELOITTE.TARGET
EXCEPT 
SELECT ID FROM DB_INTERVIEW_QUESTIONS.DELOITTE.SOURCE);

SELECT S.ID, T.ID FROM SOURCE S FULL JOIN TARGET T ON S.ID = T.ID
WHERE S.ID LIKE 'NULL' AND T.ID LIKE 'NULL';

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.DELOITTE.VERTICAL_INP_HOR_OUT
(ID VARCHAR);

INSERT INTO VERTICAL_INP_HOR_OUT (ID)
VALUES
('A'),('B'),('C'),('D');

SELECT * FROM DB_INTERVIEW_QUESTIONS.DELOITTE.VERTICAL_INP_HOR_OUT;

SELECT LISTAGG(ID, ',') FROM DB_INTERVIEW_QUESTIONS.DELOITTE.VERTICAL_INP_HOR_OUT;

CREATE OR REPLACE PROCEDURE DB_INTERVIEW_QUESTIONS.DELOITTE."LARGE VALUE FROM TWO PARAMETER"(VAL1 VARCHAR, VAL2 VARCHAR)
RETURNS TABLE(VALUE VARCHAR)
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'SELECT CASE WHEN '':VAL1'' > '':VAL2'' THEN '':VAL1''
                    WHEN '':VAL1'' = '':VAL2'' THEN ''EQUAL''
                     ELSE '':VAL2''
                     END';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN TABLE(RES);
END;
$$;

CALL DB_INTERVIEW_QUESTIONS.DELOITTE."LARGE VALUE FROM TWO PARAMETER"('77', '5');

CREATE OR REPLACE PROCEDURE DB_INTERVIEW_QUESTIONS.DELOITTE."LARGE VALUE FROM TWO PARAMETER"(VAL1 int, VAL2 int)
RETURNS TABLE(VALUE INT)
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'CASE WHEN ||:VAL1|| >= ||:VAL2|| THEN ||:VAL1||
                     ELSE ||:VAL2||
                     END';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN TABLE(RES);
END;
$$;

CALL DB_INTERVIEW_QUESTIONS.DELOITTE."LARGE VALUE FROM TWO PARAMETER USING GREATEST"('11', '22');



CREATE OR REPLACE FUNCTION DB_INTERVIEW_QUESTIONS.DELOITTE.AREA_OF_RECT(VAL1 INT, VAL2 INT)
RETURNS INT
LANGUAGE SQL
AS 
$$
CASE WHEN VAL1>=VAL2
THEN VAL1 
ELSE VAL2
END
$$;

SELECT DB_INTERVIEW_QUESTIONS.DELOITTE.AREA_OF_RECT('4', '3');

SELECT GREATEST('4','3');
SELECT LOWEST('4','3');

CREATE TABLE TABLE_A(ID TEXT);
INSERT INTO TABLE_A VALUES('A'),('B'),('C'),('D');
SELECT * FROM TABLE_A;
CREATE TABLE TABLE_B(ID TEXT);
INSERT INTO TABLE_B VALUES('A'),('B');
SELECT * FROM TABLE_A A LEFT JOIN TABLE_B B ON A.ID=B.ID WHERE B.ID IS  NULL;

CREATE OR REPLACE PROCEDURE DB_INTERVIEW_QUESTIONS.DELOITTE."LARGE VALUE FROM TWO PARAMETER USING GREATEST"(VAL1 int, VAL2 int)
RETURNS TABLE(VALUE INT)
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'SELECT GREATEST('||:VAL1||','||:VAL2||')';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN TABLE(RES);
END;
$$;

CALL DB_INTERVIEW_QUESTIONS.DELOITTE."LARGE VALUE FROM TWO PARAMETER USING GREATEST"('4', '3');

CREATE OR REPLACE SCHEMA DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.EMPLOYEE
(EMP_ID INT, DEPT_ID VARCHAR, SALARY INT, GENDER VARCHAR);

INSERT INTO DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.EMPLOYEE
(EMP_ID, DEPT_ID, SALARY, GENDER)
VALUES
('123', 'ABC', '1000', 'M'),
('124', 'ABC', '1001', 'F'),
('125', 'ABC', '1002', 'F'),
('126', 'DEF', '1003', 'M'),
('127', 'DEF', '1004', 'M'),
('128', 'DEF', '1005', 'F'),
('129', 'DEF', '1005', 'M');

SELECT * FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.EMPLOYEE;

SELECT P.EMP_ID FROM 
(SELECT E.*, DENSE_RANK() OVER(PARTITION BY DEPT_ID ORDER BY SALARY DESC) DR FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.EMPLOYEE E) P
WHERE P.DR = '1';

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE
(ID INT, STUDENT VARCHAR);

INSERT INTO DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE
(ID, STUDENT)
VALUES
('1', 'RAM'),
('2', 'SHYAM'),
('3', 'VAIBHAV'),
('4', 'GOVIND'),
('5', 'KRISHNA');

SELECT * FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABL;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE_BKP
AS
SELECT * FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE_BKP;

UPDATE DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE_BKP
SET STUDENT = (CASE 
               WHEN STUDENT = 'RAM' THEN 'SHYAM'
               WHEN STUDENT = 'SHYAM' THEN 'RAM'
               WHEN STUDENT = 'VAIBHAV' THEN 'GOVIND'
               WHEN STUDENT = 'GOVIND' THEN 'VAIBHAV'
               ELSE STUDENT
               END);

SELECT * FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE_BKP;

SELECT SYSDATE();
SELECT SPLIT_PART('ILIAZ.SNOWFLAKE@GMAIL.COM','.',3);
SELECT LOWER('ILIAZ.SNOWFLAKE@GMAIL.COM');
SELECT UPPER('iliaz.snowflake@gmail.com');
SELECT INITCAP('ILIAZ');
SELECT 1!=1;
SELECT 100/50;
SELECT 2*2;
SELECT ANY_VALUE(C_ACCTBAL) FROM CUSTOMER;
SELECT COALESCE(1,NULL);
SELECT CONCAT('SHAIK','ILIAZ');
SELECT 'SHAIK'||' ILIAZ';
SELECT CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP());
SELECT CURRENT_DATABASE();
SELECT CURRENT_SCHEMA();
SELECT CURRENT_SESSION();
SELECT CURRENT_ACCOUNT();
SELECT CURRENT_USER();
SELECT CURRENT_ROLE();
SELECT CURRENT_AVAILABLE_ROLES();
SELECT CURRENT_WAREHOUSE();
SELECT CURRENT_STATEMENT();
SELECT CURRENT_TRANSACTION();
SELECT CURRENT_REGION();
SELECT CURRENT_IP_ADDRESS();
SELECT CURRENT_VERSION();
SELECT CURRENT_TIMESTAMP();
SELECT CURRENT_DATE();
SELECT dateadd('hour',2,current_timestamp());
SELECT DATEDIFF('MONTH','2023-07-12',CURRENT_DATE());
SELECT YEAR(TO_DATE('23-08-11','YY-MM-DD'));
SELECT DATE_PART('YEAR','2023-08-23'::DATE);
SELECT DATE_TRUNC('YEAR',CURRENT_DATE());
SELECT GET_DDL('TABLE','CUSTOMER');
SELECT GET_DDL('PROCEDURE','CUSTOMER_STREAM()');
SELECT GET_STAGE_LOCATION(@MY_INTERNAL_NAMED_STAGE);
SELECT LAST_QUERY_ID();

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.ADDING_FIRST_MIDDLE_LAST_NAME;

SELECT ID, INITCAP(FIRST_NAME)||' '||LOWER(MIDDLE_NAME)||' '||UPPER(LAST_NAME) FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.ADDING_FIRST_MIDDLE_LAST_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS;

SELECT MAX(COL) BIGGEST_IN_ALL_NUMBERS FROM 
(SELECT A COL FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS
UNION ALL
SELECT B FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS
UNION ALL
SELECT C FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS
);

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."BUS BOOKING STATUS";

SELECT *, CASE WHEN TOTAL_SEATS = SEATS_SOLD THEN 'SEATS ARE FULL'
                WHEN TOTAL_SEATS < SEATS_SOLD THEN 'OVER FULL'
                WHEN TOTAL_SEATS-SEATS_SOLD <= '10' THEN 'HURRY QUICK BOOKING'
                ELSE 'SEATS ARE AVAILABLE'
                END 
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."BUS BOOKING STATUS";

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200;

SELECT A, COUNT(*) COUNT_OF_EACH_VALUE FROM 
(SELECT A FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200
UNION ALL 
SELECT B FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200
UNION ALL
SELECT C FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200)
GROUP BY A;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T;
SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_TT;

ALTER TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T
RENAME COLUMN CITY TO TOWN;

ALTER TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T
RENAME TO EMPLOYEE_TTTT;

DROP TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T;
CREATE OR REPLACE TABLE EMPLOYEE_T
(ID INT, NAME VARCHAR, CITY VARCHAR);

UNDROP TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T;

ALTER TABLE EMPLOYEE_T
RENAME TO EMPLOYEE_TTT;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD;

SELECT *EXCLUDE(RN) FROM (
SELECT *, ROW_NUMBER() OVER(ORDER BY ID) RN 
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD)
WHERE RN <= '10';

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS";

SELECT COUNT(*) "NO OF P'S" FROM (
SELECT COL1 COL FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS"
UNION ALL
SELECT COL2 FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS"
UNION ALL
SELECT COL3 FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS"
UNION ALL
SELECT COL4 FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS")
WHERE COL = 'P'
GROUP BY COL;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SEPERATION_OF_INR500;

SELECT PRICE, TRIM(REGEXP_REPLACE(PRICE,'[A-Z ]')) "ONLY AMT" FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SEPERATION_OF_INR500;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SPLITTING_OF_NAME;
SELECT NAME, SUBSTR(NAME, '1', REGEXP_INSTR(NAME, ' ')-1) "FIRST NAME", 
SUBSTR(NAME, REGEXP_INSTR(NAME, ' ')+1) "LAST NAME" 
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SPLITTING_OF_NAME;

SELECT SUBSTR('SURYA KUMAR YADAV', '1', REGEXP_INSTR('SURYA KUMAR YADAV',' ')-1) FIRST_NAME,
SUBSTR('SURYA KUMAR YADAV', REGEXP_INSTR('SURYA KUMAR YADAV', ' ')+1, 
REGEXP_INSTR('SURYA KUMAR YADAV', ' ')-1) MIDDLE_NAME, SUBSTR('SURYA KUMAR YADAV', REGEXP_INSTR('SURYA KUMAR YADAV', ' ')+1) LAST_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.TEST;

SELECT AMOUNT, (SELECT SUM(AMOUNT)
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.TEST
WHERE AMOUNT = CASE WHEN AMOUNT > 0 THEN AMOUNT
            ELSE '0'
            END) POSITIVE_TOTAL, (SELECT SUM(AMOUNT) FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.TEST
            WHERE AMOUNT = CASE WHEN AMOUNT <= 0 THEN AMOUNT
            ELSE '0'
            END) NEGETIVE_TOTAL 
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.TEST;

SELECT SUM(CASE WHEN AMOUNT >0 THEN AMOUNT
                ELSE '0' END) POSITIVE_TOTAL, SUM(CASE WHEN AMOUNT<= 0 THEN AMOUNT ELSE '0' END) NEGETIVE_TOTAL FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.TEST;

SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.CUSTOMER;
SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES;

SELECT DRUG, (TOTAL_SALES - COGS) TOTAL_PROFIT 
FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES
ORDER BY TOTAL_PROFIT DESC
LIMIT 3 
OFFSET 0;

SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.CUSTOMER;
SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.ORDERS;

SELECT O.ORD_NO, O.PURCH_AMT, C.CUST_NAME, C.CITY FROM ORDERS O NATURAL JOIN CUSTOMER C 
WHERE O.PURCH_AMT BETWEEN '500' AND '2000';

SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_DUPLICATE;

drop table if exists cars;
create table if not exists cars
(
    id      int,
    model   varchar(50),
    brand   varchar(40),
    color   varchar(30),
    make    int
);
insert into cars values (1, 'Model S', 'Tesla', 'Blue', 2018);
insert into cars values (2, 'EQS', 'Mercedes-Benz', 'Black', 2022);
insert into cars values (3, 'iX', 'BMW', 'Red', 2022);
insert into cars values (4, 'Ioniq 5', 'Hyundai', 'White', 2021);
insert into cars values (5, 'Model S', 'Tesla', 'Silver', 2018);
insert into cars values (6, 'Ioniq 5', 'Hyundai', 'Green', 2021);

SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS;

drop table if exists cars_ALL_DUPLICATE;
create table if not exists cars_ALL_DUPLICATE
(
    id      int,
    model   varchar(50),
    brand   varchar(40),
    color   varchar(30),
    make    int
);
insert into cars_all_duplicate values (1, 'Model S', 'Tesla', 'Blue', 2018);
insert into cars_all_duplicate values (2, 'EQS', 'Mercedes-Benz', 'Black', 2022);
insert into cars_all_duplicate values (3, 'iX', 'BMW', 'Red', 2022);
insert into cars_all_duplicate values (4, 'Ioniq 5', 'Hyundai', 'White', 2021);
insert into cars_all_duplicate values (1, 'Model S', 'Tesla', 'Blue', 2018);
insert into cars_all_duplicate values (4, 'Ioniq 5', 'Hyundai', 'White', 2021);

select * from cars_all_duplicate;

CREATE OR REPLACE TABLE CARS_BKP 
AS
SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_ALL_DUPLICATE_BKP
AS
SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_ALL_DUPLICATE;

SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS;

DELETE FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS
WHERE ID NOT IN (SELECT  MIN(ID) FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS
                  GROUP BY MODEL, BRAND);

SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_ALL_DUPLICATE;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_ALL_DUPLICATE_2
AS 
SELECT DISTINCT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_ALL_DUPLICATE;

SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_ALL_DUPLICATE_2;

TRUNCATE TABLE DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_ALL_DUPLICATE;

insert into DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_ALL_DUPLICATE
select * from DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_ALL_DUPLICATE_2;

select * from DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_ALL_DUPLICATE;

drop table DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_ALL_DUPLICATE_2;

SELECT * FROM DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.PRODUCT;
SELECT * FROM DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.SALES;

UPDATE DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.SALES
SET  PRODUCT_ID = CASE WHEN PRODUCT_ID = '104' THEN '102'
                             WHEN PRODUCT_ID = '105' THEN '103'
                             ELSE PRODUCT_ID
                             END;

SELECT P.CATEGORY, SUM(S.TOTAL_AMOUNT) TOTAL_REVENUE FROM SALES S
INNER JOIN PRODUCT P ON P.PRODUCT_ID = S.PRODUCT_ID
WHERE EXTRACT(MONTH,SALES_DATE) = '05'
GROUP BY P.CATEGORY;

SELECT P.PRODUCT_ID, P.PRODUCT_NAME, SUM(S.QUANTITY) TOTAL_QUANTITY_SOLD FROM DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.SALES S
INNER JOIN DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.PRODUCT P
ON P.PRODUCT_ID = S.PRODUCT_ID
WHERE EXTRACT(MONTH, S.SALES_DATE) = '05'
GROUP BY P.PRODUCT_ID, P.PRODUCT_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TCS.CITY;

SELECT NAME FROM DB_INTERVIEW_QUESTIONS.TCS.CITY
LIMIT 1 OFFSET 6;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TCS.TABLEA;
SELECT * FROM DB_INTERVIEW_QUESTIONS.TCS.TABLEB;

SELECT COUNT(*) FROM TABLEA A  FULL JOIN TABLEB B ON A.ID = B.ID;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU;

SELECT STU_ID, STU_NAME, AVG(MARKS) AVG_MARKS FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU
GROUP BY STU_ID, STU_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.EMPLOYEE;

SELECT *EXCLUDE(DR) FROM 
(SELECT E.*, DENSE_RANK() OVER(PARTITION BY DEPT ORDER BY SALARY ASC) DR FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.EMPLOYEE E)
WHERE DR = '3';

SELECT * FROM DB_INTERVIEW_QUESTIONS.VIRTUSA.COUNTRY_MEDALS_TABLE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.VIRTUSA.COUNTRY_MEDALS_TABLE
ORDER BY CASE WHEN COUNTRY LIKE 'INDIA' THEN 1
              WHEN COUNTRY LIKE 'CHINA' THEN '2'
              WHEN COUNTRY LIKE 'JAPAN' THEN '3'
              WHEN COUNTRY LIKE 'AUSTRALIA' THEN '4'
              ELSE COUNTRY
              END;

SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.CLASS;
SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL;

CREATE OR REPLACE TABLE STUDENT2
AS 
SELECT STU_ROLL, STU_NAME, STU_PHNO 
FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL
WHERE STU_NAME LIKE '&BASHEER%'
AND STU_CLASS LIKE '7';

SELECT S.STU_ROLL, S.STU_NAME, S.STU_PHNO, S.STU_CLASS, C.STU_SECTION, C.STU_CLASSTEACHER 
FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL S
INNER JOIN DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.CLASS C
ON S.STU_ROLL = C.STU_ROLL 
WHERE S.STU_NAME LIKE '%BASHEER%'
  AND S.STU_CLASS LIKE '7'
  AND C.STU_SECTION LIKE 'D';

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.INFORMATION;

SELECT SCHEMA_NAME, TABLE_NAME, LISTAGG(COLUMN_NAME, ',') FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.INFORMATION
GROUP BY SCHEMA_NAME, TABLE_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.JOB_TITLE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.JOB_TITLE
ORDER BY 
          CASE WHEN JOB_TITLE = 'TEACHER' THEN 1
          WHEN JOB_TITLE = 'DOCTOR' THEN 2
          WHEN JOB_TITLE = 'CLERCK' THEN 3
          WHEN JOB_TITLE = 'ENGG' THEN 4
          ELSE JOB_TITLE
          END;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

SELECT DISTINCT P.DEPT, P.MAX_SALARY FROM (
SELECT *, MAX(SALARY) OVER(PARTITION BY DEPT) MAX_SALARY 
FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH) P;

SELECT DEPT, MAX(SALARY) MAX_SALARY 
FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH
GROUP BY DEPT;

SELECT DISTINCT DEPT, AVG(SALARY) OVER(PARTITION BY DEPT) AVG_SALARY 
FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

SELECT DEPT, SUM(SALARY)
FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH
GROUP BY DEPT;

SELECT *EXCLUDE(RN) FROM (
SELECT *, ROW_NUMBER() OVER(PARTITION BY DEPT ORDER BY NAME) RN FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH)
WHERE RN = 1;

SELECT *EXCLUDE(HIGHEST_SALARY) FROM (
SELECT *, DENSE_RANK() OVER(PARTITION BY DEPT ORDER BY SALARY DESC) HIGHEST_SALARY 
FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH) P
WHERE P.HIGHEST_SALARY = 1;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABA;
SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABB;

SELECT COUNT(*) FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABA A
 JOIN DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABB B
ON A.ID = B.IB;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.INFORMATION;

CREATE OR REPLACE TABLE MASKING_POLICY_YASH_DUP
AS 
SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.MPHASIS.MASKING_POLICY_YASH_DUP_BKP
AS
SELECT * FROM DB_INTERVIEW_QUESTIONS.MPHASIS.MASKING_POLICY_YASH_DUP;

CREATE OR REPLACE MASKING POLICY MASK_ON_SALARY
AS (VALUE INT) RETURNS INT 
->
CASE WHEN CURRENT_ROLE() IN ('SYSADMIN') THEN VALUE
     ELSE '0000'
     END;

ALTER TABLE DB_INTERVIEW_QUESTIONS.MPHASIS.MASKING_POLICY_YASH_DUP_BKP
MODIFY COLUMN SALARY
SET MASKING POLICY MASK_ON_SALARY;

SELECT * FROM DB_INTERVIEW_QUESTIONS.MPHASIS.MASKING_POLICY_YASH_DUP_BKP;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE
EXCEPT
SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE;

SELECT ROLL_NO FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE
WHERE ROLL_NO NOT IN (SELECT ROLL_NO FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE);

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE;

SELECT EMP_ID, DEPT, SALARY FROM (
SELECT *, DENSE_RANK() OVER(ORDER BY SALARY) DR 
FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE) P
WHERE P.DR = '5';

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CLN_CUSTOMER;

UPDATE DB_INTERVIEW_QUESTIONS.TURING.CLN_CUSTOMER
SET STATE = CASE WHEN STATE LIKE 'New York' THEN 'Texas'
         WHEN STATE LIKE 'Texas' THEN 'New York'
         WHEN STATE LIKE 'Arizona' THEN 'Andhra'
         WHEN STATE LIKE 'Andhra' THEN 'Arizona'
         ELSE STATE
         END;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2;

SELECT DEPARTMENT, COUNT(EMP_ID) TOTAL_NO_OF_EMPS FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2
WHERE SALARY > '10000'
GROUP BY DEPARTMENT
HAVING TOTAL_NO_OF_EMPS > 1;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.SALES;
SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.VENDOR;

UPDATE DB_INTERVIEW_QUESTIONS.TURING.SALES
SET TOTAL_PROFIT = NULL;

UPDATE DB_INTERVIEW_QUESTIONS.TURING.SALES 
SET TOTAL_PROFIT = (S.SALES_AMOUNT - V.PURCHASE_AMT)
FROM DB_INTERVIEW_QUESTIONS.TURING.SALES S
INNER JOIN DB_INTERVIEW_QUESTIONS.TURING.VENDOR V
ON S.SALES_ID = V.SALES_ID;


SELECT * FROM  DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_TABLE_FOR_CLUSTERING;
CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_TABLE_FOR_CLUSTERING
AS 
SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE;

ALTER TABLE DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_TABLE_FOR_CLUSTERING
CLUSTER BY (EMP_ID);

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE;

SELECT CUST_ID, CUST_NAME, CUST_CITY, INVOICE_ID 
FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE
WHERE INVOICE_AMT >= (SELECT AVG(INVOICE_AMT) FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE);

SELECT 'sql' FROM DUAL
UNION 
SELECT NULL FROM DUAL;

SELECT 'SQL' FROM DUAL
UNION ALL
SELECT 1 FROM DUAL;

SELECT 'SQL' FROM DUAL
UNION
SELECT '1' FROM DUAL;

SELECT * FROM DB_INTERVIEW_QUESTIONS.VIRTUSA.COUNTRY_MEDALS_TABLE;

SELECT COUNTRY, MEDALS 
FROM DB_INTERVIEW_QUESTIONS.VIRTUSA.COUNTRY_MEDALS_TABLE
ORDER BY CASE WHEN COUNTRY LIKE 'CHINA' THEN '1'
              ELSE 2
              END,
              MEDALS;

SELECT COALESCE(NULL, 5 ,1 ,2);
SELECT coalesce(1, 3, 5);
SELECT NVL(NULL,0);
SELECT NVL(7,NULL);
COALESCE( <expr1> , <expr2> [ , ... , <exprN> ] )