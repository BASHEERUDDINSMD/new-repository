SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.PART LIMIT 3000;
USE WAREHOUSE  BASHEER_WH;

SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.PARTSUPP LIMIT 3000;
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.CUSTOMER LIMIT 3000;
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.LINEITEM LIMIT 3000;
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.NATION LIMIT 3000;
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.ORDERS LIMIT 3000;
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.REGION LIMIT 3000;
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.SUPPLIER LIMIT 3000;

CREATE OR REPLACE DATABASE DB_TPCH_SF;
CREATE OR REPLACE SCHEMA DB_TPCH_SF.SCH_TPCH_SF;
CREATE OR REPLACE SCHEMA DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL;

CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.CUSTOMER 
AS
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.CUSTOMER LIMIT 0;

CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.LINEITEM 
AS
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.LINEITEM LIMIT 0;

CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.NATION 
AS
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.NATION LIMIT 0;

CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.ORDERS 
AS
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.ORDERS LIMIT 0;

CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.PART 
AS
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.PART LIMIT 0;

CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.PARTSUPP
AS
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.PARTSUPP LIMIT 0;

CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.REGION
AS
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.REGION LIMIT 0;

CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.SUPPLIER
AS
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.SUPPLIER LIMIT 0;

SELECT GET_DDL('TABLE', 'DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.CUSTOMER');
SELECT GET_DDL('TABLE', 'DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.LINEITEM');
SELECT GET_DDL('TABLE', 'DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.NATION');
SELECT GET_DDL('TABLE', 'DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.ORDERS');
SELECT GET_DDL('TABLE', 'DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.PART');
SELECT GET_DDL('TABLE', 'DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.PARTSUPP');
SELECT GET_DDL('TABLE', 'DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.REGION');
SELECT GET_DDL('TABLE', 'DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.SUPPLIER');

DB_STG_TPCH_SF.SCH_TPCH_SF;
DB_TPCH_SF.SCH_TPCH_SF;

create or replace TABLE DB_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO (
	C_CUSTKEY NUMBER,
	C_NAME VARCHAR,
	C_ADDRESS VARCHAR,
	C_NATIONKEY NUMBER,
	C_PHONE VARCHAR,
	C_ACCTBAL NUMBER,
	C_MKTSEGMENT VARCHAR,
	C_COMMENT VARCHAR
);

create or replace TABLE DB_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE (
	L_ORDERKEY NUMBER,
	L_PARTKEY NUMBER,
	L_SUPPKEY NUMBER,
	L_LINENUMBER NUMBER,
	L_QUANTITY NUMBER,
	L_EXTENDEDPRICE NUMBER,
	L_DISCOUNT NUMBER,
	L_TAX NUMBER,
	L_RETURNFLAG VARCHAR,
	L_LINESTATUS VARCHAR,
	L_SHIPDATE DATE,
	L_COMMITDATE DATE,
	L_RECEIPTDATE DATE,
	L_SHIPINSTRUCT VARCHAR,
	L_SHIPMODE VARCHAR,
	L_COMMENT VARCHAR
);

create or replace TABLE DB_TPCH_SF.SCH_TPCH_SF.NATION_NMD_INT_STG (
	N_NATIONKEY NUMBER,
	N_NAME VARCHAR,
	N_REGIONKEY NUMBER,
	N_COMMENT VARCHAR
);

create or replace TABLE DB_TPCH_SF.SCH_TPCH_SF.ORDERS_USG_TABLESTG (
	O_ORDERKEY NUMBER,
	O_CUSTKEY NUMBER,
	O_ORDERSTATUS VARCHAR,
	O_TOTALPRICE NUMBER,
	O_ORDERDATE DATE,
	O_ORDERPRIORITY VARCHAR,
	O_CLERK VARCHAR,
	O_SHIPPRIORITY NUMBER,
	O_COMMENT VARCHAR
);

create or replace TABLE DB_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCRMNT (
        P_ID NUMBER AUTOINCREMENT START 24020001 INCREMENT 1,
	P_PARTKEY NUMBER,
	P_NAME VARCHAR,
	P_MFGR VARCHAR,
	P_BRAND VARCHAR,
	P_TYPE VARCHAR,
	P_SIZE NUMBER,
	P_CONTAINER VARCHAR,
	P_RETAILPRICE NUMBER,
	P_COMMENT VARCHAR
);

create or replace TABLE DB_TPCH_SF.SCH_TPCH_SF.PARTSUPP_USRSTG (
	PS_PARTKEY NUMBER,
	PS_SUPPKEY NUMBER,
	PS_AVAILQTY NUMBER,
	PS_SUPPLYCOST NUMBER,
	PS_COMMENT VARCHAR
);

create or replace TABLE DB_TPCH_SF.SCH_TPCH_SF.REGION_WEBUI (
	R_REGIONKEY NUMBER,
	R_NAME VARCHAR,
	R_COMMENT VARCHAR
);

CREATE OR REPLACE SEQUENCE DB_STG_TPCH_SF.SCH_TPCH_SF.SEQ_SUPPLIER_TAB
START = 202402420001 
INCREMENT = 1;

create or replace TABLE DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ (
        S_SEQID NUMBER DEFAULT DB_STG_TPCH_SF.SCH_TPCH_SF.SEQ_SUPPLIER_TAB.NEXTVAL,	
        S_SUPPKEY NUMBER,
	S_NAME VARCHAR,
	S_ADDRESS VARCHAR,
	S_NATIONKEY NUMBER,
	S_PHONE VARCHAR,
	S_ACCTBAL NUMBER,
	S_COMMENT VARCHAR
);

SELECT GET_DDL('TABLE', 'DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ');


create or replace TABLE DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.CUSTOMER_COPYINTO (
	C_CUSTKEY VARCHAR,
	C_NAME VARCHAR,
	C_ADDRESS VARCHAR,
	C_NATIONKEY VARCHAR,
	C_PHONE VARCHAR,
	C_ACCTBAL VARCHAR,
	C_MKTSEGMENT VARCHAR,
	C_COMMENT VARCHAR
);

create or replace TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE (
	L_ORDERKEY VARCHAR,
	L_PARTKEY VARCHAR,
	L_SUPPKEY VARCHAR,
	L_LINENUMBER VARCHAR,
	L_QUANTITY VARCHAR,
	L_EXTENDEDPRICE VARCHAR,
	L_DISCOUNT VARCHAR,
	L_TAX VARCHAR,
	L_RETURNFLAG VARCHAR,
	L_LINESTATUS VARCHAR,
	L_SHIPDATE VARCHAR,
	L_COMMITDATE VARCHAR,
	L_RECEIPTDATE VARCHAR,
	L_SHIPINSTRUCT VARCHAR,
	L_SHIPMODE VARCHAR,
	L_COMMENT VARCHAR
);

create or replace TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.NATION_NMD_INT_STG (
	N_NATIONKEY VARCHAR,
	N_NAME VARCHAR,
	N_REGIONKEY VARCHAR,
	N_COMMENT VARCHAR
);

create or replace TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.ORDERS_TABLE_STG (
	O_ORDERKEY VARCHAR,
	O_CUSTKEY VARCHAR,
	O_ORDERSTATUS VARCHAR,
	O_TOTALPRICE VARCHAR,
	O_ORDERDATE VARCHAR,
	O_ORDERPRIORITY VARCHAR,
	O_CLERK VARCHAR,
	O_SHIPPRIORITY VARCHAR,
	O_COMMENT VARCHAR
);

create or replace TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCREMENT (	
        P_PARTKEY VARCHAR,
	P_NAME VARCHAR,
	P_MFGR VARCHAR,
	P_BRAND VARCHAR,
	P_TYPE VARCHAR,
	P_SIZE VARCHAR,
	P_CONTAINER VARCHAR,
	P_RETAILPRICE VARCHAR,
	P_COMMENT VARCHAR
);

create or replace TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.PARTSUPP_USERSTG (
	PS_PARTKEY VARCHAR,
	PS_SUPPKEY VARCHAR,
	PS_AVAILQTY VARCHAR,
	PS_SUPPLYCOST VARCHAR,
	PS_COMMENT VARCHAR
);

create or replace TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.REGION_WEBUI (
	R_REGIONKEY VARCHAR,
	R_NAME VARCHAR,
	R_COMMENT VARCHAR
);

create or replace TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.SUPPLIER_SEQ (
	S_SUPPKEY VARCHAR,
	S_NAME VARCHAR,
	S_ADDRESS VARCHAR,
	S_NATIONKEY VARCHAR,
	S_PHONE VARCHAR,
	S_ACCTBAL VARCHAR,
	S_COMMENT VARCHAR
);


SHOW INTEGRATIONS;
DESC INTEGRATION AWS_SNOWFLAKE_STORAGE_INTEGRATION;

CREATE OR REPLACE STAGE DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE
URL = 's3://s3-bucket-basheer/'
STORAGE_INTEGRATION = AWS_SNOWFLAKE_STORAGE_INTEGRATION;

LIST @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE;

CREATE OR REPLACE FILE FORMAT DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT
TYPE = 'CSV'
COMPRESSION = 'AUTO'
TRIM_SPACE = TRUE
FIELD_DELIMITER = '\t'
RECORD_DELIMITER = '\n'
ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE
SKIP_HEADER = 1
FIELD_OPTIONALLY_ENCLOSED_BY = '"'
NULL_IF = ('\N')
ESCAPE = 'NONE';


CREATE OR REPLACE PIPE DB_STG_TPCH_SF.SCH_TPCH_SF."PIPE TO LOAD DATA INTO LINEITEM TAB"
AUTO_INGEST = TRUE
AS
COPY INTO DB_STG_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE';

SELECT SYSTEM$PIPE_STATUS('DB_STG_TPCH_SF.SCH_TPCH_SF."PIPE TO LOAD DATA INTO LINEITEM TAB"');

ALTER PIPE DB_STG_TPCH_SF.SCH_TPCH_SF."PIPE TO LOAD DATA INTO LINEITEM TAB" 
SET PIPE_EXECUTION_PAUSED = TRUE;

SELECT SYSTEM$PIPE_STATUS('DB_STG_TPCH_SF.SCH_TPCH_SF."PIPE TO LOAD DATA INTO LINEITEM TAB"');

ALTER PIPE DB_STG_TPCH_SF.SCH_TPCH_SF."PIPE TO LOAD DATA INTO LINEITEM TAB" 
SET PIPE_EXECUTION_PAUSED = FALSE;

SELECT SYSTEM$PIPE_FORCE_RESUME('DB_STG_TPCH_SF.SCH_TPCH_SF."PIPE TO LOAD DATA INTO LINEITEM TAB"','STALENESS_CHECK_OVERRIDE');

SELECT * FROM TABLE(VALIDATE_PIPE_LOAD(PIPE_NAME => 'DB_STG_TPCH_SF.SCH_TPCH_SF."PIPE TO LOAD DATA INTO LINEITEM TAB"', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM TABLE(VALIDATE_PIPE_LOAD(PIPE_NAME => 'DB_STG_TPCH_SF.SCH_TPCH_SF."PIPE TO LOAD DATA INTO LINEITEM TAB"', START_TIME => DATEADD(HOUR,-1,CURRENT_TIMESTAMP())));

CREATE OR REPLACE STREAM DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON SNOWPIPE TABLE"
ON TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE
APPEND_ONLY = TRUE;

SELECT SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON SNOWPIPE TABLE"');

CREATE OR REPLACE PROCEDURE DB_STG_TPCH_SF.SCH_TPCH_SF.PROC_TO_MERGE_INTO_LINEITEM_TAB()
RETURNS STRING NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'MERGE INTO DB_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE T
USING DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON SNOWPIPE TABLE" S
ON T.L_PARTKEY = S.L_PARTKEY
WHEN NOT MATCHED THEN
INSERT 
(L_ORDERKEY, L_PARTKEY, L_SUPPKEY, L_LINENUMBER, L_QUANTITY, L_EXTENDEDPRICE, L_DISCOUNT, L_TAX, L_RETURNFLAG, L_LINESTATUS, L_SHIPDATE, L_COMMITDATE, L_RECEIPTDATE, L_SHIPINSTRUCT, L_SHIPMODE, L_COMMENT)
VALUES
(
    L_ORDERKEY :: NUMBER,
	L_PARTKEY :: NUMBER,
	L_SUPPKEY :: NUMBER,
	L_LINENUMBER :: NUMBER,
	L_QUANTITY :: NUMBER,
	L_EXTENDEDPRICE :: NUMBER,
	L_DISCOUNT :: NUMBER,
	L_TAX :: NUMBER,
	L_RETURNFLAG :: VARCHAR,
	L_LINESTATUS :: VARCHAR,
	L_SHIPDATE :: DATE,
	L_COMMITDATE :: DATE,
	L_RECEIPTDATE :: DATE,
	L_SHIPINSTRUCT :: VARCHAR,
	L_SHIPMODE :: VARCHAR,
	L_COMMENT :: VARCHAR
)
WHEN MATCHED AND S.L_SUPPKEY <> 0 THEN
UPDATE SET 
T.L_ORDERKEY = S.L_ORDERKEY,
T.L_PARTKEY = S.L_PARTKEY,
T.L_SUPPKEY = S.L_SUPPKEY,
T.L_LINENUMBER = S.L_LINENUMBER,
T.L_QUANTITY = S.L_QUANTITY,
T.L_EXTENDEDPRICE = S.L_EXTENDEDPRICE,
T.L_DISCOUNT = S.L_DISCOUNT,
T.L_TAX = S.L_TAX,
T.L_RETURNFLAG = S.L_RETURNFLAG,
T.L_LINESTATUS = S.L_LINESTATUS,
T.L_SHIPDATE = S.L_SHIPDATE,
T.L_COMMITDATE = S.L_COMMITDATE,
T.L_RECEIPTDATE = S.L_RECEIPTDATE,
T.L_SHIPINSTRUCT = S.L_SHIPINSTRUCT,
T.L_SHIPMODE = S.L_SHIPMODE,
T.L_COMMENT = S.L_COMMENT
WHEN MATCHED AND S.L_SUPPKEY = 0 
THEN DELETE';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN 'MERGE DATA INTO LINEITEM TABLE COMPLETED';
END;
$$;

CALL DB_STG_TPCH_SF.SCH_TPCH_SF."PROC_TO_MERGE_INTO_LINEITEM_TAB"();

CREATE OR REPLACE TASK DB_STG_TPCH_SF.SCH_TPCH_SF."TASK TO CALL PROC ON LINEITEM TABL"
WAREHOUSE = ' BASHEER_WH'
SCHEDULE = 'USING CRON 16 14 18 02 0 UTC'
WHEN SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON SNOWPIPE TABLE"')
AS
CALL DB_STG_TPCH_SF.SCH_TPCH_SF."PROC_TO_MERGE_INTO_LINEITEM_TAB"();

SHOW TASKS;

ALTER TASK DB_STG_TPCH_SF.SCH_TPCH_SF."TASK TO CALL PROC ON LINEITEM TABL" RESUME;
ALTER TASK DB_STG_TPCH_SF.SCH_TPCH_SF."TASK TO CALL PROC ON LINEITEM TABL" SUSPEND;

SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(TASK_NAME => 'TASK TO CALL PROC ON LINEITEM TABL', SCHEDULED_TIME_RANGE_START => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE;

CREATE OR REPLACE STREAM DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON CUSTOMER TABLE"
ON TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO
APPEND_ONLY = TRUE;

SELECT SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON CUSTOMER TABLE"');

CREATE OR REPLACE PROCEDURE DB_STG_TPCH_SF.SCH_TPCH_SF."PROC_TO_MERGE_INTO_CUSTOMER_TAB"()
RETURNS STRING NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'MERGE INTO DB_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO T
USING DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON CUSTOMER TABLE" S
ON S.C_CUSTKEY = T.C_CUSTKEY
WHEN NOT MATCHED THEN
INSERT
(T.C_CUSTKEY, T.C_NAME, T.C_ADDRESS, T.C_NATIONKEY, T.C_PHONE, T.C_ACCTBAL, T.C_MKTSEGMENT, T.C_COMMENT)
VALUES
(
    S.C_CUSTKEY :: NUMBER,
    S.C_NAME :: VARCHAR,
	S.C_ADDRESS :: VARCHAR,
	S.C_NATIONKEY :: NUMBER,
	S.C_PHONE :: VARCHAR,
	S.C_ACCTBAL :: NUMBER,
	S.C_MKTSEGMENT :: VARCHAR,
	S.C_COMMENT :: VARCHAR
)
WHEN MATCHED AND S.C_NAME <> ''0'' THEN ----QUOTES ARE IMPORTANT FOR S.C_NAME BECAUSE ITS DATATYP IS VARCHAR
UPDATE SET
T.C_CUSTKEY = S.C_CUSTKEY,
T.C_NAME = S.C_NAME,
T.C_ADDRESS = S.C_ADDRESS,
T.C_NATIONKEY = S.C_NATIONKEY,
T.C_PHONE = S.C_PHONE,
T.C_ACCTBAL = S.C_ACCTBAL,
T.C_MKTSEGMENT = S.C_MKTSEGMENT,
T.C_COMMENT = S.C_COMMENT
WHEN MATCHED AND S.C_NAME = ''0'' THEN -----QUOTES ARE IMPORTANT FOR S.C_NAME BECAUSE ITS DATATYP IS VARCHAR
DELETE';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN 'MERGING DATA INTO CUSTOMER TABLE COMPLETED';
END;
$$;

CALL DB_STG_TPCH_SF.SCH_TPCH_SF."PROC_TO_MERGE_INTO_CUSTOMER_TAB"();

CREATE OR REPLACE TASK DB_STG_TPCH_SF.SCH_TPCH_SF."TASK TO CALL PROC ON CUSTOMER TABL"
WAREHOUSE = 'BASHEER_WH'
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON CUSTOMER TABLE"')
AS
CALL DB_STG_TPCH_SF.SCH_TPCH_SF."PROC_TO_MERGE_INTO_CUSTOMER_TAB"();

SHOW TASKS;

ALTER TASK DB_STG_TPCH_SF.SCH_TPCH_SF."TASK TO CALL PROC ON CUSTOMER TABL" RESUME;
ALTER TASK DB_STG_TPCH_SF.SCH_TPCH_SF."TASK TO CALL PROC ON CUSTOMER TABL" SUSPEND;

SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(TASK_NAME => 'TASK TO CALL PROC ON CUSTOMER TABL', SCHEDULED_TIME_RANGE_START => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

LIST @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE;

COPY INTO DB_STG_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO
FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_STG_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO;
SELECT SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON CUSTOMER TABLE"');

SHOW TASKS;

ALTER TASK DB_STG_TPCH_SF.SCH_TPCH_SF."TASK TO CALL PROC ON CUSTOMER TABL" RESUME;
ALTER TASK DB_STG_TPCH_SF.SCH_TPCH_SF."TASK TO CALL PROC ON CUSTOMER TABL" SUSPEND;

SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(TASK_NAME => 'TASK TO CALL PROC ON CUSTOMER TABL', SCHEDULED_TIME_RANGE_START => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

INSERT INTO DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.CUSTOMER_COPYINTO
SELECT DISTINCT * FROM DB_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO;

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.CUSTOMER_COPYINTO;

TRUNCATE TABLE DB_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO;

SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO;

INSERT INTO DB_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO
SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.CUSTOMER_COPYINTO;

TRUNCATE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.CUSTOMER_COPYINTO;

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF_TO_GET_DDL.CUSTOMER_COPYINTO;

CREATE OR REPLACE STREAM DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON PART AUTOINCR TABLE"
ON TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCREMENT
APPEND_ONLY = TRUE;

SELECT SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON PART AUTOINCR TABLE"');

COPY INTO DB_STG_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCREMENT
FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_STG_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCREMENT', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCREMENT;

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON PART AUTOINCR TABLE";

SELECT SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON PART AUTOINCR TABLE"');

CREATE OR REPLACE PROCEDURE DB_STG_TPCH_SF.SCH_TPCH_SF."PROC_TO_MERGE_INTO_PART_AUTOINCR_TAB"()
RETURNS STRING NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'MERGE INTO DB_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCRMNT T
USING DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON PART AUTOINCR TABLE" S
ON T.P_PARTKEY = S.P_PARTKEY
WHEN NOT MATCHED THEN 
INSERT
(P_PARTKEY, P_NAME, P_MFGR, P_BRAND, P_TYPE, P_SIZE, P_CONTAINER, P_RETAILPRICE, P_COMMENT)
VALUES
(
	S.P_PARTKEY :: NUMBER,
	S.P_NAME :: VARCHAR,
	S.P_MFGR :: VARCHAR,
	S.P_BRAND :: VARCHAR,
	S.P_TYPE :: VARCHAR,
	S.P_SIZE :: NUMBER,
	S.P_CONTAINER :: VARCHAR,
	S.P_RETAILPRICE :: NUMBER,
	S.P_COMMENT :: VARCHAR
)
WHEN MATCHED AND S.P_NAME <> ''0'' THEN
UPDATE SET 
T.P_PARTKEY = S.P_PARTKEY, 
T.P_NAME = S.P_NAME, 
T.P_MFGR = S.P_MFGR, 
T.P_BRAND = S.P_BRAND, 
T.P_TYPE = S.P_TYPE, 
T.P_SIZE = S.P_SIZE, 
T.P_CONTAINER = S.P_CONTAINER, 
T.P_RETAILPRICE = S.P_RETAILPRICE, 
T.P_COMMENT = S.P_COMMENT
WHEN MATCHED AND S.P_NAME = ''0'' THEN 
DELETE';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN 'MERGE DATA INTO AUTOINCR TABLE COMPLETED';
END;
$$;

CALL DB_STG_TPCH_SF.SCH_TPCH_SF."PROC_TO_MERGE_INTO_PART_AUTOINCR_TAB"();

CREATE OR REPLACE TASK DB_STG_TPCH_SF.SCH_TPCH_SF."TASK TO CALL PROC ON PART AUTOINCR TABL"
WAREHOUSE = 'BASHEER_WH'
SCHEDULE = 'USING CRON 45 13 17 02 6 UTC'
WHEN SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON PART AUTOINCR TABLE"')
AS
CALL DB_STG_TPCH_SF.SCH_TPCH_SF."PROC_TO_MERGE_INTO_PART_AUTOINCR_TAB"();

SHOW TASKS;

ALTER TASK DB_STG_TPCH_SF.SCH_TPCH_SF."TASK TO CALL PROC ON PART AUTOINCR TABL" RESUME;
ALTER TASK DB_STG_TPCH_SF.SCH_TPCH_SF."TASK TO CALL PROC ON PART AUTOINCR TABL" SUSPEND;

SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(TASK_NAME = 'TASK TO CALL PROC ON PART AUTOINCR TABL', SCHEDULED_TIME_RANGE_START => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

REMOVE @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE;

CREATE OR REPLACE SEQUENCE DB_STG_TPCH_SF.SCH_TPCH_SF.SEQ_SUPPLIER_TAB
START = 202402420001 
INCREMENT = 1;

COPY INTO DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ
(S_SUPPKEY, S_NAME, S_ADDRESS, S_NATIONKEY, S_PHONE, S_ACCTBAL, S_COMMENT)
FROM (SELECT $1, $2, $3, $4, $5, $6, $7 FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE/SUPPLIER1.tsv)
FILE_FORMAT =(FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ;

TRUNCATE TABLE DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ;

https://tt59530.ap-southeast-1.snowflakecomputing.com;

LIST @~;

CREATE OR REPLACE STAGE DB_STG_TPCH_SF.SCH_TPCH_SF.INTERNAL_STAGE;

LIST @DB_STG_TPCH_SF.SCH_TPCH_SF.INTERNAL_STAGE;

LIST @%ORDERS_USG_TABLESTG;

REMOVE @internal_stage/ORDERS.tsv.gz;

COPY INTO DB_TPCH_SF.SCH_TPCH_SF.NATION_NMD_INT_STG FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.INTERNAL_STAGE
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_TPCH_SF.SCH_TPCH_SF.NATION_NMD_INT_STG', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.NATION_NMD_INT_STG;

LIST @%ORDERS_USG_TABLESTG;

COPY INTO DB_TPCH_SF.SCH_TPCH_SF.ORDERS_USG_TABLESTG FROM @%ORDERS_USG_TABLESTG
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_TPCH_SF.SCH_TPCH_SF.ORDERS_USG_TABLESTG', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.ORDERS_USG_TABLESTG;

LIST @~;

COPY INTO DB_TPCH_SF.SCH_TPCH_SF.PARTSUPP_USRSTG FROM @~
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_TPCH_SF.SCH_TPCH_SF.PARTSUPP_USRSTG', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.PARTSUPP_USRSTG;

CREATE OR REPLACE SECURE VIEW  DB_STG_TPCH_SF.SCH_TPCH_SF."SEC VW BY JOINS ALL TPC_H TABLES"
AS
(SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCRMNT PA
LEFT JOIN DB_TPCH_SF.SCH_TPCH_SF.PARTSUPP_USRSTG PU
ON PA.P_PARTKEY = PU.PS_PARTKEY
LEFT JOIN DB_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE L
ON L.L_PARTKEY = PU.PS_PARTKEY
LEFT JOIN DB_TPCH_SF.SCH_TPCH_SF.ORDERS_USG_TABLESTG O
ON L.L_ORDERKEY = O.O_ORDERKEY
LEFT JOIN DB_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO C
ON O.O_CUSTKEY = C.C_CUSTKEY
LEFT JOIN DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ S
ON C.C_NATIONKEY = S.S_NATIONKEY
LEFT JOIN DB_TPCH_SF.SCH_TPCH_SF.NATION_NMD_INT_STG N
ON S.S_NATIONKEY = N.N_NATIONKEY
LEFT JOIN DB_TPCH_SF.SCH_TPCH_SF.REGION_WEBUI R
ON N.N_REGIONKEY = R.R_REGIONKEY);

LIST @~;

LIST @DB_STG_TPCH_SF.SCH_TPCH_SF.INTERNAL_STAGE;

LIST @%ORDERS_USG_TABLESTG;

COPY INTO DB_TPCH_SF.SCH_TPCH_SF.PARTSUPP_USRSTG FROM @~
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_TPCH_SF.SCH_TPCH_SF.PARTSUPP_USRSTG', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.PARTSUPP_USRSTG;

COPY INTO DB_TPCH_SF.SCH_TPCH_SF.ORDERS_USG_TABLESTG FROM @%ORDERS_USG_TABLESTG
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_TPCH_SF.SCH_TPCH_SF.ORDERS_USG_TABLESTG', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.ORDERS_USG_TABLESTG;

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO;

SELECT SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON CUSTOMER TABLE"');
SELECT SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON SNOWPIPE TABLE"');

SELECT COUNT(*) FROM DB_STG_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE;

LIST @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE;

COPY INTO DB_STG_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_STG_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON SNOWPIPE TABLE"');
SELECT SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON CUSTOMER TABLE"');

SELECT COUNT(*) FROM DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON CUSTOMER TABLE";
SELECT COUNT(*) FROM DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON SNOWPIPE TABLE";

SELECT COUNT(*) FROM DB_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO;---3000--10000
SELECT COUNT(*) FROM DB_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE;---3000---8792
SELECT COUNT(*) FROM DB_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCRMNT;---3000---10000

COPY INTO DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ
(S_SUPPKEY, S_NAME, S_ADDRESS, S_NATIONKEY, S_PHONE, S_ACCTBAL, S_COMMENT)
FROM (SELECT $1, $1, $1, $1, $1, $1, $1 FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE/SUPPLIER_3001_6000.tsv)
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT COUNT(*) FROM DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ;---3000--6000

COPY INTO DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ
(S_SUPPKEY, S_NAME, S_ADDRESS, S_NATIONKEY, S_PHONE, S_ACCTBAL, S_COMMENT)
FROM (SELECT $1, $1, $1, $1, $1, $1, $1 FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE/SUPPLIER_6001_10000.tsv)
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT COUNT(*) FROM DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ;---3000--6000--10000

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF."VW ON JOINS ALL TPC_H TABLES" LIMIT 2000;

REMOVE @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE;

LIST @%ORDERS_USG_TABLESTG;

C:\Users\BASHEERUDDIN\Downloads\unload_fls

COPY INTO @%ORDERS_USG_TABLESTG FROM DB_TPCH_SF.SCH_TPCH_SF.ORDERS_USG_TABLESTG;

LIST @DB_STG_TPCH_SF.SCH_TPCH_SF.INTERNAL_STAGE;

COPY INTO @DB_STG_TPCH_SF.SCH_TPCH_SF.INTERNAL_STAGE FROM DB_TPCH_SF.SCH_TPCH_SF.NATION_NMD_INT_STG;

LIST @~;

COPY INTO @~ FROM DB_TPCH_SF.SCH_TPCH_SF.PARTSUPP_USRSTG;

get @DB_STG_TPCH_SF.SCH_TPCH_SF.INTERNAL_STAGE file://C:\Users\BASHEERUDDIN\Downloads\unload_fls;
get @~ file://C:\Users\BASHEERUDDIN\Downloads\unload_fls;
get @%ORDERS_USG_TABLESTG file://C:\Users\BASHEERUDDIN\Downloads\unload_fls;


CREATE OR REPLACE FUNCTION DB_STG_TPCH_SF.SCH_TPCH_SF."PERIMITER OF RECTANGLE"(LENGTH FLOAT, BREADTH FLOAT)
RETURNS FLOAT NOT NULL
AS
$$
2*LENGTH+2*BREADTH
$$;

SELECT DB_STG_TPCH_SF.SCH_TPCH_SF."PERIMITER OF RECTANGLE"(12, 8);

CREATE OR REPLACE FUNCTION DB_STG_TPCH_SF.SCH_TPCH_SF."AREA OF RECTANGLE"(LENGTH FLOAT, BREADTH FLOAT)
RETURNS FLOAT NOT NULL
AS
$$
LENGTH*BREADTH
$$;

SELECT DB_STG_TPCH_SF.SCH_TPCH_SF."AREA OF RECTANGLE"(12, 8);

CREATE OR REPLACE FUNCTION DB_STG_TPCH_SF.SCH_TPCH_SF."PERIMITER OF CIRCLE"(RADIUS FLOAT)
RETURNS FLOAT
AS
$$
2*PI()*RADIUS
$$;

SELECT DB_STG_TPCH_SF.SCH_TPCH_SF."PERIMITER OF CIRCLE"(21);

LIST @~;

REMOVE @~/PARTSUPP_3001_6000.tsv.gz;

REMOVE @~;

LIST @%ORDERS_USG_TABLESTG;

REMOVE @%ORDERS_USG_TABLESTG;

LIST @DB_STG_TPCH_SF.SCH_TPCH_SF.INTERNAL_STAGE;

REMOVE @DB_STG_TPCH_SF.SCH_TPCH_SF.INTERNAL_STAGE;

TRUNCATE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO;
TRUNCATE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE;
TRUNCATE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCREMENT;

SELECT SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON CUSTOMER TABLE"');
SELECT SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON PART AUTOINCR TABLE"');
SELECT SYSTEM$STREAM_HAS_DATA('DB_STG_TPCH_SF.SCH_TPCH_SF."STRM ON SNOWPIPE TABLE"');

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF."SEC VW BY JOINS ALL TPC_H TABLES";

SELECT COUNT(*) FROM (
WITH SOURCE1 AS
(SELECT C.C_CUSTKEY, C.C_NAME, C.C_ADDRESS FROM DB_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO C), 
SOURCE2 AS 
(SELECT L.L_ORDERKEY, L.L_PARTKEY FROM DB_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE L),
TARGET AS 
(SELECT * FROM SOURCE1, SOURCE2)
SELECT * FROM TARGET);---8,79,20,000

SELECT COUNT(*) FROM 
(WITH SOURCE1 AS
(SELECT O.O_ORDERKEY, O.O_CUSTKEY, O.O_ORDERSTATUS, L.L_ORDERKEY, L.L_PARTKEY, L.L_SUPPKEY  FROM DB_TPCH_SF.SCH_TPCH_SF.ORDERS_USG_TABLESTG O
LEFT JOIN DB_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE L ON O.O_ORDERKEY = L.L_ORDERKEY),
SOURCE2 AS
(SELECT P.P_ID, P.P_PARTKEY, P.P_NAME, P.P_MFGR, PU.PS_PARTKEY, PU.PS_SUPPKEY, PU.PS_AVAILQTY, PU.PS_SUPPLYCOST, PU.PS_COMMENT FROM DB_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCRMNT P
LEFT JOIN  DB_TPCH_SF.SCH_TPCH_SF.PARTSUPP_USRSTG PU ON P.P_PARTKEY = PU.PS_PARTKEY),
SOURCE3 AS
(SELECT C.C_CUSTKEY, C.C_NAME, C.C_ADDRESS FROM DB_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO C), 
SOURCE4 AS 
(SELECT L.L_ORDERKEY, L.L_PARTKEY FROM DB_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE L), 
TARGET AS
(SELECT * FROM SOURCE1, SOURCE2, SOURCE3, SOURCE4)
SELECT * FROM TARGET);---10,00,00,000----8792000000000000

SELECT COUNT(*) FROM 
(WITH CUSTOMER AS
(SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO),
LINEITEM AS
(SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE),
ORDERS AS
(SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.ORDERS_USG_TABLESTG),
PARTSUPP AS
(SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.PARTSUPP_USRSTG),
PART AS
(SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCRMNT),
SUPPLIER AS
(SELECT * FROM DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ),
TARGET AS
(SELECT * FROM CUSTOMER, LINEITEM, ORDERS, PARTSUPP, PART, SUPPLIER)
SELECT * FROM TARGET);

SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.CUSTOMER LIMIT 10000;
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.LINEITEM LIMIT 10000;
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.ORDERS LIMIT 10000;
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.PART LIMIT 10000;
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.PARTSUPP LIMIT 10000;
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.SUPPLIER LIMIT 10000;

CALL DB_STG_TPCH_SF.SCH_TPCH_SF."PROC_TO_MERGE_INTO_LINEITEM_TAB"();

SELECT COUNT(*) FROM DB_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE;
SELECT COUNT(*) FROM DB_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO;

CALL DB_STG_TPCH_SF.SCH_TPCH_SF."PROC_TO_MERGE_INTO_PART_AUTOINCR_TAB"();

SELECT COUNT(*) FROM DB_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCRMNT;

https://tt59530.ap-southeast-1.snowflakecomputing.com;
LIST @DB_STG_TPCH_SF.SCH_TPCH_SF.INTERNAL_STAGE;

COPY INTO DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ
(S_SUPPKEY, S_NAME, S_ADDRESS, S_NATIONKEY, S_PHONE, S_ACCTBAL, S_COMMENT)
FROM (SELECT $1, $2, $3, $4, $5, $6, $7 FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.INTERNAL_STAGE)
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT COUNT(*) FROM DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ;

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF."SEC VW BY JOINS ALL TPC_H TABLES";


TRUNCATE TABLE DB_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO;
TRUNCATE TABLE DB_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE;
TRUNCATE TABLE DB_TPCH_SF.SCH_TPCH_SF.NATION_NMD_INT_STG;
TRUNCATE TABLE DB_TPCH_SF.SCH_TPCH_SF.ORDERS_USG_TABLESTG;
TRUNCATE TABLE DB_TPCH_SF.SCH_TPCH_SF.PARTSUPP_USRSTG;
TRUNCATE TABLE DB_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCRMNT;
TRUNCATE TABLE DB_TPCH_SF.SCH_TPCH_SF.REGION_WEBUI;
TRUNCATE TABLE DB_TPCH_SF.SCH_TPCH_SF.SUPPLIER_USG_SEQ;
TRUNCATE TABLE DB_TPCH_SF.SCH_TPCH_SF."TABLE BY JOINS ALL TPC_H TABLES";
TRUNCATE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.LINEITEM_SNOWPIPE;
TRUNCATE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.PART_AUTO_INCREMENT;
TRUNCATE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.CUSTOMER_COPYINTO;


CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.SAMPLE3_JSON_DATA
(BOOK_DETAILS VARIANT);

CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.DWSAMPLE_JSON_DATA
(COL VARIANT);

CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.STUDENT_JSON_DATA
(STUDENT_DETAILS VARIANT);

CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.PRODUCT_JSON_DATA
(PRODUCT_DETAILS VARIANT);

CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.EMPLOYEE_JSON_DATA
(EMPLOYEE_DETAILS VARIANT);

CREATE OR REPLACE FILE FORMAT DB_STG_TPCH_SF.SCH_TPCH_SF.JSON_FILE_FORMAT
TYPE = JSON;

LIST @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE;

COPY INTO "DB_STG_TPCH_SF"."SCH_TPCH_SF"."CUSTOMER_COPYINTO"
FROM '@"DB_STG_TPCH_SF"."SCH_TPCH_SF"."%CUSTOMER_COPYINTO"/__snowflake_temp_import_files__/'
FILES = ('CUSTOMER_10000.tsv')
FILE_FORMAT = (
    TYPE=JSON,
    STRIP_OUTER_ARRAY=FALSE,
    REPLACE_INVALID_CHARACTERS=TRUE,
    DATE_FORMAT=AUTO,
    TIME_FORMAT=AUTO,
    TIMESTAMP_FORMAT=AUTO
)
MATCH_BY_COLUMN_NAME=NONE
ON_ERROR=ABORT_STATEMENT
PURGE=TRUE;

COPY INTO DB_STG_TPCH_SF.SCH_TPCH_SF.SAMPLE3_JSON_DATA
FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.JSON_FILE_FORMAT')
ON_ERROR = 'ABORT_STATEMENT'
PURGE = TRUE;

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF.SAMPLE3_JSON_DATA;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_STG_TPCH_SF.SCH_TPCH_SF.SAMPLE3_JSON_DATA', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

COPY INTO DB_STG_TPCH_SF.SCH_TPCH_SF.STUDENT_JSON_DATA
FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE/students1.json
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.JSON_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

LIST @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE;

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF.STUDENT_JSON_DATA;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_STG_TPCH_SF.SCH_TPCH_SF.STUDENT_JSON_DATA', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

COPY INTO DB_STG_TPCH_SF.SCH_TPCH_SF.EMPLOYEE_JSON_DATA
FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE/employees1.json
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.JSON_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

LIST @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE;

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF.EMPLOYEE_JSON_DATA;

COPY INTO DB_STG_TPCH_SF.SCH_TPCH_SF.PRODUCT_JSON_DATA
FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE/products1.json
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.JSON_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF.PRODUCT_JSON_DATA;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_STG_TPCH_SF.SCH_TPCH_SF.PRODUCT_JSON_DATA', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));


COPY INTO DB_STG_TPCH_SF.SCH_TPCH_SF.DWSAMPLE_JSON_DATA
FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE/dwsample4-json.json
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.JSON_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF.DWSAMPLE_JSON_DATA;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_STG_TPCH_SF.SCH_TPCH_SF.DWSAMPLE_JSON_DATA', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF.DWSAMPLE_JSON_DATA;

SELECT COL:firstName::VARCHAR First_name, COL:lastName::VARCHAR LAST_NAME, COL:gender::VARCHAR GENDER, COL:age::INT AGE,
COL:address:streetAddress::VARCHAR STREET_ADDRESS, COL:address:city::VARCHAR CITY, COL:address:state::VARCHAR STATE, COL:address:postalCode::VARCHAR POSTAL_CODE,
COL:phoneNumbers[0]:type::VARCHAR TYPE,
COL:phoneNumbers[0]:number::INT NUMBER
FROM DB_STG_TPCH_SF.SCH_TPCH_SF.DWSAMPLE_JSON_DATA;

SELECT COL:firstName::varchar FIRST_NAME, COL:lastName::VARCHAR LAST_NAME, COL:gender::VARCHAR GENDER, COL:age::INT AGE, COL:address:streetAddress::VARCHAR STREET_ADDRESS, COL:address:city::VARCHAR CITY, COL:address:state::VARCHAR STATE, COL:address:postalCode::INT POSTAL_CODE, value:type::VARCHAR TYPE, value:number::INT NUMBER FROM DB_STG_TPCH_SF.SCH_TPCH_SF.DWSAMPLE_JSON_DATA, LATERAL FLATTEN(INPUT => COL:phoneNumbers);--- Here COL is a staging table column name where we create a table using variant datatype and phoneNumbers(case sensitive) ia a word before start of array.

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF.PRODUCT_JSON_DATA;

SELECT VALUE:productID::VARCHAR PRODUCT_ID, 
VALUE:manufacturer::VARCHAR MANUFACTURER,
VALUE:img::VARCHAR IMG, 
VALUE:Url::VARCHAR URL,
VALUE:productName::VARCHAR PRODUCT_NAME, 
VALUE:Description::VARCHAR DESCRIPTION,
VALUE:price::INT PRICE, 
VALUE:category::VARCHAR CATEGORY 
FROM DB_STG_TPCH_SF.SCH_TPCH_SF.PRODUCT_JSON_DATA,LATERAL FLATTEN(INPUT => PRODUCT_DETAILS:products);--- Here PRODUCT_DETAILS is a staging table column name where we create a table using variant datatype and products(case sensitive) ia a word before start of array.

SELECT 
PRODUCT_DETAILS:products[0]:productID::INT PRODUCT_ID,
PRODUCT_DETAILS:products[0]:manufacturer::VARCHAR MANUFACTURER,
PRODUCT_DETAILS:products[0]:img::VARCHAR IMG,
PRODUCT_DETAILS:products[0]:Url::VARCHAR URL,
PRODUCT_DETAILS:products[0]:productName::VARCHAR PRODUCT_NAME,
PRODUCT_DETAILS:products[0]:Description::VARCHAR DESCRIPTION,
PRODUCT_DETAILS:products[0]:price::INT PRICE,
PRODUCT_DETAILS:products[0]:category::VARCHAR CATEGORY,

PRODUCT_DETAILS:products[1]:productID::INT PRODUCT_ID,
PRODUCT_DETAILS:products[1]:manufacturer::VARCHAR MANUFACTURER,
PRODUCT_DETAILS:products[1]:img::VARCHAR IMG,
PRODUCT_DETAILS:products[1]:Url::VARCHAR URL,
PRODUCT_DETAILS:products[1]:productName::VARCHAR PRODUCT_NAME,
PRODUCT_DETAILS:products[1]:Description::VARCHAR DESCRIPTION,
PRODUCT_DETAILS:products[1]:price::INT PRICE,
PRODUCT_DETAILS:products[1]:category::VARCHAR CATEGORY,

PRODUCT_DETAILS:products[2]:productID::INT PRODUCT_ID,
PRODUCT_DETAILS:products[2]:manufacturer::VARCHAR MANUFACTURER,
PRODUCT_DETAILS:products[2]:img::VARCHAR IMG,
PRODUCT_DETAILS:products[2]:Url::VARCHAR URL,
PRODUCT_DETAILS:products[2]:productName::VARCHAR PRODUCT_NAME,
PRODUCT_DETAILS:products[2]:Description::VARCHAR DESCRIPTION,
PRODUCT_DETAILS:products[2]:price::INT PRICE,
PRODUCT_DETAILS:products[2]:category::VARCHAR CATEGORY,

PRODUCT_DETAILS:products[3]:productID::INT PRODUCT_ID,
PRODUCT_DETAILS:products[3]:manufacturer::VARCHAR MANUFACTURER,
PRODUCT_DETAILS:products[3]:img::VARCHAR IMG,
PRODUCT_DETAILS:products[3]:Url::VARCHAR URL,
PRODUCT_DETAILS:products[3]:productName::VARCHAR PRODUCT_NAME,
PRODUCT_DETAILS:products[3]:Description::VARCHAR DESCRIPTION,
PRODUCT_DETAILS:products[3]:price::INT PRICE,
PRODUCT_DETAILS:products[3]:category::VARCHAR CATEGORY,

PRODUCT_DETAILS:products[4]:productID::INT PRODUCT_ID,
PRODUCT_DETAILS:products[4]:manufacturer::VARCHAR MANUFACTURER,
PRODUCT_DETAILS:products[4]:img::VARCHAR IMG,
PRODUCT_DETAILS:products[4]:Url::VARCHAR URL,
PRODUCT_DETAILS:products[4]:productName::VARCHAR PRODUCT_NAME,
PRODUCT_DETAILS:products[4]:Description::VARCHAR DESCRIPTION,
PRODUCT_DETAILS:products[4]:price::INT PRICE,
PRODUCT_DETAILS:products[4]:category::VARCHAR CATEGORY

FROM DB_STG_TPCH_SF.SCH_TPCH_SF.PRODUCT_JSON_DATA;

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF.STUDENT_JSON_DATA;

SELECT 
STUDENT_DETAILS:students[0]:id::INT ID,
STUDENT_DETAILS:students[0]:firstName::VARCHAR FIRST_NAME,
STUDENT_DETAILS:students[0]:lastName::VARCHAR LAST_NAME,
STUDENT_DETAILS:students[0]:fullName::VARCHAR FULL_NAME,
STUDENT_DETAILS:students[0]:fatherName::VARCHAR FATHER_NAME,
STUDENT_DETAILS:students[0]:grades[0]::VARCHAR GRADES1,
STUDENT_DETAILS:students[0]:grades[1]::VARCHAR GRADES2,
STUDENT_DETAILS:students[0]:grades[2]::VARCHAR GRADES3,

STUDENT_DETAILS:students[1]:id::INT ID,
STUDENT_DETAILS:students[1]:firstName::VARCHAR FIRST_NAME,
STUDENT_DETAILS:students[1]:lastName::VARCHAR LAST_NAME,
STUDENT_DETAILS:students[1]:fullName::VARCHAR FULL_NAME,
STUDENT_DETAILS:students[1]:fatherName::VARCHAR FATHER_NAME,
STUDENT_DETAILS:students[1]:grades[0]::VARCHAR GRADES1,
STUDENT_DETAILS:students[1]:grades[1]::VARCHAR GRADES2,
STUDENT_DETAILS:students[1]:grades[2]::VARCHAR GRADES3,

STUDENT_DETAILS:students[2]:id::INT ID,
STUDENT_DETAILS:students[2]:firstName::VARCHAR FIRST_NAME,
STUDENT_DETAILS:students[2]:lastName::VARCHAR LAST_NAME,
STUDENT_DETAILS:students[2]:fullName::VARCHAR FULL_NAME,
STUDENT_DETAILS:students[2]:fatherName::VARCHAR FATHER_NAME,
STUDENT_DETAILS:students[2]:grades[0]::VARCHAR GRADES1,
STUDENT_DETAILS:students[2]:grades[1]::VARCHAR GRADES2,
STUDENT_DETAILS:students[2]:grades[2]::VARCHAR GRADES3,

STUDENT_DETAILS:students[3]:id::INT ID,
STUDENT_DETAILS:students[3]:firstName::VARCHAR FIRST_NAME,
STUDENT_DETAILS:students[3]:lastName::VARCHAR LAST_NAME,
STUDENT_DETAILS:students[3]:fullName::VARCHAR FULL_NAME,
STUDENT_DETAILS:students[3]:fatherName::VARCHAR FATHER_NAME,
STUDENT_DETAILS:students[3]:grades[0]::VARCHAR GRADES1,
STUDENT_DETAILS:students[3]:grades[1]::VARCHAR GRADES2,
STUDENT_DETAILS:students[3]:grades[2]::VARCHAR GRADES3
FROM DB_STG_TPCH_SF.SCH_TPCH_SF.STUDENT_JSON_DATA;

SELECT 
VALUE:id::INT ID,
VALUE:firstName::VARCHAR FIRST_NAME,
VALUE:lastName::VARCHAR LAST_NAME,
VALUE:fullName::VARCHAR FULL_NAME,
VALUE:age::INT AGE, 
VALUE:class::VARCHAR CLASS, 
VALUE:fatherName::VARCHAR FATHER_NAME,
VALUE:grades[0]::VARCHAR GRADES1,
VALUE:grades[1]::VARCHAR GRADES2,
VALUE:grades[2]::VARCHAR GRADES3
FROM DB_STG_TPCH_SF.SCH_TPCH_SF.STUDENT_JSON_DATA, LATERAL FLATTEN(INPUT => STUDENT_DETAILS:students);--- Here STUDENT_DETAILS is a staging table column name where we create a table using variant datatype and students(case sensitive) ia a word before start of array.

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF.EMPLOYEE_JSON_DATA;

SELECT 
VALUE:empId::VARCHAR EMPID,
VALUE:firstName::VARCHAR FIRST_NAME,
VALUE:lastName::VARCHAR LAST_NAME,
VALUE:fullName::VARCHAR FULL_NAME,
VALUE:jobTitle::VARCHAR JOB_TITLE,
VALUE:contact::VARCHAR CONTACT,
VALUE:email::VARCHAR EMAIL,
VALUE:address::VARCHAR ADDRESS
FROM DB_STG_TPCH_SF.SCH_TPCH_SF.EMPLOYEE_JSON_DATA, LATERAL FLATTEN(INPUT => EMPLOYEE_DETAILS:Employees);--- Here EMPLOYEE_DETAILS is a staging table column name where we create a table using variant datatype and Employees(case sensitive) ia a word before start of array.

CREATE OR REPLACE TABLE DB_STG_TPCH_SF.SCH_TPCH_SF.KLM_JSON_DATA
(COLU VARIANT);

LIST @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE;

COPY INTO DB_STG_TPCH_SF.SCH_TPCH_SF.KLM_JSON_DATA
FROM @DB_STG_TPCH_SF.SCH_TPCH_SF.EXTERNAL_STAGE/KLM.json
FILE_FORMAT = (FORMAT_NAME = 'DB_STG_TPCH_SF.SCH_TPCH_SF.JSON_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM DB_STG_TPCH_SF.SCH_TPCH_SF.KLM_JSON_DATA; 

SELECT 
VALUE:"Country Code"::VARCHAR "COUNTRY CODE",
VALUE:"Country Name"::VARCHAR "COUNTRY NAME",
VALUE:"Value"::INT VALUE,
VALUE:"Year"::INT YEAR
FROM DB_STG_TPCH_SF.SCH_TPCH_SF.KLM_JSON_DATA, LATERAL FLATTEN(INPUT => COLU);----If you dont have word before array then simply put upto column name of staging table;

