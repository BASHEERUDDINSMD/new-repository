SELECT * FROM AJFLASJFL.AJFLASJF.AFLKDSJFLKD;
SELECT * FROM  SNOWFLAKE_SAMPLE_DATA.TPCH_SF1000.SUPPLIER LIMIT 1000;

CREATE DATABASE SUPPLIER;
ALTER DATABASE SUPPLIER RENAME TO SUPPLIER_DB_STG;

CREATE SCHEMA SUPPLIER_DB_STG.SUPPLIER_SCH;

CREATE OR REPLACE TABLE SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER
AS 
SELECT * FROM  SNOWFLAKE_SAMPLE_DATA.TPCH_SF1000.SUPPLIER LIMIT 1000;

SELECT COUNT(*) FROM SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER;

TRUNCATE TABLE SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER;

SELECT * FROM SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER;

SELECT GET_DDL('TABLE', 'SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER');

CREATE OR REPLACE TABLE SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_CONTLOAD_USG_SNOWPIPE (
	S_SUPPKEY VARCHAR,
	S_NAME VARCHAR,
	S_ADDRESS VARCHAR,
	S_NATIONKEY VARCHAR,
	S_PHONE VARCHAR,
	S_ACCTBAL VARCHAR,
	S_COMMENT VARCHAR
);

ALTER TABLE SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER
RENAME TO SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO;

CREATE OR REPLACE DATABASE SUPPLIER_DB;
CREATE OR REPLACE SCHEMA SUPPLIER_DB.SUPPLIER_SCH;

CREATE OR REPLACE SEQUENCE SUPPLIER_DB_STG.SUPPLIER_SCH.SEQ_ON_SUPPLIER
START = 1
INCREMENT = 1;

CREATE OR REPLACE TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_AUTOINCREMENT(
    SEQ_ID INT AUTOINCREMENT START 1001 INCREMENT 1,
	S_SUPPKEY NUMBER,
	S_NAME VARCHAR,
	S_ADDRESS VARCHAR,
	S_NATIONKEY NUMBER,
	S_PHONE VARCHAR,
	S_ACCTBAL NUMBER,
	S_COMMENT VARCHAR
);

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER;

ALTER TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER
RENAME TO SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_WEBUI;

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_WEBUI;

DESC   INTEGRATION AWS_STORAGE_INTEGRATION;

SHOW INTEGRAION ;

CREATE OR REPLACE STORAGE INTEGRATION INT_BTW_AWS_SF
TYPE = EXTERNAL_STAGE
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::468200154354:role/ROLE_NOV'
STORAGE_PROVIDER = S3
STORAGE_ALLOWED_LOCATIONS = ('s3://files-storage-bucket-basheer/','s3://s3-bucket-basheer/');

DESC INTEGRATION INT_BTW_AWS_SF;

CREATE OR REPLACE STAGE SUPPLIER_DB_STG.SUPPLIER_SCH.EXT_STAGE
URL = 's3://s3-bucket-basheer/'
STORAGE_INTEGRATION = INT_BTW_AWS_SF;

GRANT USAGE ON INTEGRATION INT_BTW_AWS_SF TO ROLE SYSADMIN;

CREATE OR REPLACE STAGE SUPPLIER_DB_STG.SUPPLIER_SCH.EXT_STAGE
URL = 's3://s3-bucket-basheer/'
STORAGE_INTEGRATION = INT_BTW_AWS_SF;


DESC STAGE SUPPLIER_DB_STG.SUPPLIER_SCH.EXT_STAGE;

LIST @SUPPLIER_DB_STG.SUPPLIER_SCH.EXT_STAGE;

CREATE OR REPLACE FILE FORMAT SUPPLIER_DB_STG.SUPPLIER_SCH.TSV_FILE_FORMAT
TYPE = CSV
FIELD_DELIMITER = '\t'
RECORD_DELIMITER = '\n'
TRIM_SPACE = TRUE
COMPRESSION = AUTO
FIELD_OPTIONALLY_ENCLOSED_BY = '"'
SKIP_HEADER = 1
ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE
ESCAPE = 'NONE'
NULL_IF = ('/N');


COPY INTO SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO
FROM @SUPPLIER_DB_STG.SUPPLIER_SCH.EXT_STAGE
FILE_FORMAT = (FORMAT_NAME = 'SUPPLIER_DB_STG.SUPPLIER_SCH.TSV_FILE_FORMAT')
ON_ERROR = 'ABORT_STATEMENT'
PURGE = TRUE;

SELECT * FROM SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO;


SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO', START_TIME => DATEADD(HOUR, -4, CURRENT_TIMESTAMP())));

CREATE OR REPLACE STREAM SUPPLIER_DB_STG.SUPPLIER_SCH.STRM_ON_SUPPLIER_BLKLOAD_USG_COPYINTO
ON TABLE 
SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO
APPEND_ONLY = TRUE;

SELECT SYSTEM$STREAM_HAS_DATA('SUPPLIER_DB_STG.SUPPLIER_SCH.STRM_ON_SUPPLIER_BLKLOAD_USG_COPYINTO');

DESC STREAM SUPPLIER_DB_STG.SUPPLIER_SCH.STRM_ON_SUPPLIER_BLKLOAD_USG_COPYINTO;

CREATE OR REPLACE PROCEDURE SUPPLIER_DB_STG.SUPPLIER_SCH."PROC TO LOAD DATA INTO SUPPLIER_BLKLOAD USING COPY COMMD"()
RETURNS STRING
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'INSERT INTO SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO
SELECT 
S_SUPPKEY :: NUMBER,
	S_NAME :: VARCHAR,
	S_ADDRESS :: VARCHAR,
	S_NATIONKEY :: NUMBER,
	S_PHONE :: VARCHAR,
	S_ACCTBAL :: NUMBER,
	S_COMMENT :: VARCHAR
    FROM SUPPLIER_DB_STG.SUPPLIER_SCH.STRM_ON_SUPPLIER_BLKLOAD_USG_COPYINTO
WHERE METADATA$ACTION = ''INSERT''';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN 'DONE';
END;
$$;

CALL SUPPLIER_DB_STG.SUPPLIER_SCH."PROC TO LOAD DATA INTO SUPPLIER_BLKLOAD USING COPY COMMD"();

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO;

CREATE OR REPLACE PIPE SUPPLIER_DB_STG.SUPPLIER_SCH.PIPE_CONTLOAD_DATA
AUTO_INGEST = TRUE
AS
COPY INTO SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_CONTLOAD_USG_SNOWPIPE
FROM @SUPPLIER_DB_STG.SUPPLIER_SCH.EXT_STAGE
FILE_FORMAT = (FORMAT_NAME = 'SUPPLIER_DB_STG.SUPPLIER_SCH.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE';

DESC PIPE SUPPLIER_DB_STG.SUPPLIER_SCH.PIPE_CONTLOAD_DATA;

SHOW PIPES;

SHOW STREAMS;

SELECT SYSTEM$PIPE_STATUS('SUPPLIER_DB_STG.SUPPLIER_SCH.PIPE_CONTLOAD_DATA');

SELECT * FROM TABLE(VALIDATE_PIPE_LOAD(PIPE_NAME => 'SUPPLIER_DB_STG.SUPPLIER_SCH.PIPE_CONTLOAD_DATA', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_CONTLOAD_USG_SNOWPIPE;

CREATE OR REPLACE STREAM SUPPLIER_DB_STG.SUPPLIER_SCH.STRM_ON_SUPPLIER_CONTLOAD_TABLE
ON TABLE SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_CONTLOAD_USG_SNOWPIPE
APPEND_ONLY = TRUE;

SELECT SYSTEM$STREAM_HAS_DATA('SUPPLIER_DB_STG.SUPPLIER_SCH.STRM_ON_SUPPLIER_CONTLOAD_TABLE');

CREATE OR REPLACE PROCEDURE SUPPLIER_DB_STG.SUPPLIER_SCH."PROC TO LOAD DATA INTO TAR TABLE CONTLOADUSG SNOWPIPE"()
RETURNS STRING
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'INSERT INTO SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_CONTLOAD_USG_SNOWPIPE
SELECT 
S_SUPPKEY :: NUMBER,
	S_NAME :: VARCHAR,
	S_ADDRESS :: VARCHAR,
	S_NATIONKEY :: NUMBER,
	S_PHONE :: VARCHAR,
	S_ACCTBAL :: NUMBER,
	S_COMMENT :: VARCHAR
FROM SUPPLIER_DB_STG.SUPPLIER_SCH.STRM_ON_SUPPLIER_CONTLOAD_TABLE
WHERE METADATA$ACTION = ''INSERT''';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN 'DONE';
END;
$$;

CREATE OR REPLACE TASK SUPPLIER_DB_STG.SUPPLIER_SCH.TSK_TO_LOAD_DATA_IN_CONTLOAD_SNOWPIPE_TAB
WAREHOUSE = BSHR_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SUPPLIER_DB_STG.SUPPLIER_SCH.STRM_ON_SUPPLIER_CONTLOAD_TABLE')
AS
CALL SUPPLIER_DB_STG.SUPPLIER_SCH."PROC TO LOAD DATA INTO TAR TABLE CONTLOADUSG SNOWPIPE"();

SHOW TASKS;

ALTER TASK SUPPLIER_DB_STG.SUPPLIER_SCH.TSK_TO_LOAD_DATA_IN_CONTLOAD_SNOWPIPE_TAB RESUME;

ALTER TASK SUPPLIER_DB_STG.SUPPLIER_SCH.TSK_TO_LOAD_DATA_IN_CONTLOAD_SNOWPIPE_TAB SUSPEND;

SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(TASK_NAME => 'TSK_TO_LOAD_DATA_IN_CONTLOAD_SNOWPIPE_TAB', SCHEDULED_TIME_RANGE_START=> DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_CONTLOAD_USG_SNOWPIPE;

SHOW STORAGE INTEGRATIONS;

COPY INTO SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC
FROM s3://s3-bucket-basheer/SUPPLIER7.tsv
FILE_FORMAT = (FORMAT_NAME = 'SUPPLIER_DB_STG.SUPPLIER_SCH.TSV_FILE_FORMAT')
STORAGE_INTEGRATION = INT_BTW_AWS_SF
ON_ERROR = 'ABORT_STATEMENT';

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC;

CREATE OR REPLACE STAGE SUPPLIER_DB_STG.SUPPLIER_SCH.INT_STAGE;

LIST @SUPPLIER_DB_STG.SUPPLIER_SCH.INT_STAGE;

COPY INTO SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_NAMDINTSTG
FROM @SUPPLIER_DB_STG.SUPPLIER_SCH.INT_STAGE
FILE_FORMAT = (FORMAT_NAME = 'SUPPLIER_DB_STG.SUPPLIER_SCH.TSV_FILE_FORMAT')
ON_ERROR = 'ABORT_STATEMENT'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_NAMDINTSTG', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_NAMDINTSTG;
list @%SUPPLIER_USG_TABLE_STG;

COPY INTO SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_TABLE_STG
FROM @%SUPPLIER_USG_TABLE_STG
FILE_FORMAT = (FORMAT_NAME = 'SUPPLIER_DB_STG.SUPPLIER_SCH.TSV_FILE_FORMAT')
PURGE = TRUE
ON_ERROR = 'ABORT_STATEMENT';

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_TABLE_STG;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_TABLE_STG', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

LIST @~;

COPY INTO SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_USER_STG
FROM @~
FILE_FORMAT = (FORMAT_NAME = 'SUPPLIER_DB_STG.SUPPLIER_SCH.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE'
PURGE = TRUE;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_USER_STG', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_USER_STG;

list @SUPPLIER_DB_STG.SUPPLIER_SCH.EXT_STAGE;

CREATE OR REPLACE PROCEDURE SUPPLIER_DB_STG.SUPPLIER_SCH.PROC_TO_LOAD_IN_SEQTAB()
RETURNS STRING
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'INSERT INTO SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_SEQ
(S_SUPPKEY, S_NAME, S_ADDRESS, S_NATIONKEY, S_PHONE, S_ACCTBAL, S_COMMENT)
SELECT 
    S_SUPPKEY :: NUMBER,
	S_NAME :: VARCHAR,
	S_ADDRESS :: VARCHAR,
	S_NATIONKEY :: NUMBER,
	S_PHONE :: VARCHAR,
	S_ACCTBAL :: NUMBER,
	S_COMMENT :: VARCHAR
FROM SUPPLIER_DB_STG.SUPPLIER_SCH.STRM_ON_SUPPLIER_BLKLOAD_USG_COPYINTO
WHERE METADATA$ACTION = ''INSERT''';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN 'DONE';
END;
$$;

CALL SUPPLIER_DB_STG.SUPPLIER_SCH.PROC_TO_LOAD_IN_SEQTAB();

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_SEQ;

LIST @SUPPLIER_DB_STG.SUPPLIER_SCH.EXT_STAGE;

CREATE OR REPLACE PROCEDURE SUPPLIER_DB_STG.SUPPLIER_SCH.PROC_LOAD_DATA_AUTOINCR_TABLE()
RETURNS STRING
LANGUAGE SQL
EXECUTE AS OWNER
AS 
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'INSERT INTO SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_AUTOINCREMENT
( S_SUPPKEY, S_NAME, S_ADDRESS, S_NATIONKEY, S_ACCTBAL, S_COMMENT)
SELECT 
    S_SUPPKEY :: NUMBER,
	S_NAME :: VARCHAR,
	S_ADDRESS :: VARCHAR,
	S_NATIONKEY :: NUMBER,
	S_ACCTBAL :: NUMBER,
	S_COMMENT :: VARCHAR
FROM SUPPLIER_DB_STG.SUPPLIER_SCH.STRM_ON_SUPPLIER_BLKLOAD_USG_COPYINTO
WHERE METADATA$ACTION = ''INSERT''';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN 'COMPLETE';
END;
$$;

CALL SUPPLIER_DB_STG.SUPPLIER_SCH.PROC_LOAD_DATA_AUTOINCR_TABLE();

SELECT COUNT(*) FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_AUTOINCREMENT;

CREATE OR REPLACE SECURE VIEW SUPPLIER_DB_STG.SUPPLIER_SCH.VW_OF_SUPPLIER_BLKLOAD_USING_COPYINTOCMD
AS
SELECT 
S_SUPPKEY, S_NAME,  S_NATIONKEY,  S_ACCTBAL, S_COMMENT FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO;

SELECT * FROM SUPPLIER_DB_STG.SUPPLIER_SCH.VW_OF_SUPPLIER_BLKLOAD_USING_COPYINTOCMD;

SELECT GET_DDL('VIEW','SUPPLIER_DB_STG.SUPPLIER_SCH.VW_OF_SUPPLIER_BLKLOAD_USING_COPYINTOCMD');

CREATE OR REPLACE SECURE MATERIALIZED VIEW SUPPLIER_DB_STG.SUPPLIER_SCH.VW_ON_TAB_CONTLOAD_USG_SNOWPIPE
AS
SELECT S_SUPPKEY, S_NAME, S_ADDRESS, S_NATIONKEY, S_ACCTBAL, S_COMMENT
FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_CONTLOAD_USG_SNOWPIPE;

SELECT * FROM SUPPLIER_DB_STG.SUPPLIER_SCH.VW_ON_TAB_CONTLOAD_USG_SNOWPIPE;

SELECT GET_DDL('VIEW', 'SUPPLIER_DB_STG.SUPPLIER_SCH.VW_ON_TAB_CONTLOAD_USG_SNOWPIPE');
SELECT GET_DDL('FILE_FORMAT','SUPPLIER_DB_STG.SUPPLIER_SCH.TSV_FILE_FORMAT');
SELECT GET_DDL('PROCEDURE', 'SUPPLIER_DB_STG.SUPPLIER_SCH.PROC_LOAD_DATA_AUTOINCR_TABLE()');

CREATE OR REPLACE MASKING POLICY SUPPLIER_DB_STG.SUPPLIER_SCH.MSK_POL_ON_SNOWPIPE_TAR_TAB
AS
(COL1 VARCHAR) RETURNS VARCHAR ->
CASE 
WHEN CURRENT_ROLE() IN ('SYSADMIN') THEN COL1
ELSE '*****'
END;

ALTER TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC
MODIFY COLUMN S_PHONE
SET MASKING POLICY SUPPLIER_DB_STG.SUPPLIER_SCH.MSK_POL_ON_SNOWPIPE_TAR_TAB;

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC;

DROP MASKING POLICY SUPPLIER_DB_STG.SUPPLIER_SCH.MSK_POL_ON_SNOWPIPE_TAR_TAB;

ALTER VIEW SUPPLIER_DB_STG.SUPPLIER_SCH.VW_OF_SUPPLIER_BLKLOAD_USING_COPYINTOCMD
CLUSTER BY (S_NATIONKEY);

ALTER VIEW SUPPLIER_DB_STG.SUPPLIER_SCH.VW_ON_TAB_CONTLOAD_USG_SNOWPIPE
CLUSTER BY (S_NATIONKEY);

CREATE OR REPLACE VIEW SUPPLIER_DB_STG.SUPPLIER_SCH.VW_NONMAT_ON_EXTLOC_TAB
AS
SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC;

SELECT * FROM SUPPLIER_DB_STG.SUPPLIER_SCH.VW_NONMAT_ON_EXTLOC_TAB;

ALTER VIEW SUPPLIER_DB_STG.SUPPLIER_SCH.VW_NONMAT_ON_EXTLOC_TAB
CLUSTER BY (S_NATIONKEY);

CREATE OR REPLACE MATERIALIZED VIEW SUPPLIER_DB_STG.SUPPLIER_SCH.VW_MATVW_ON_NMDINTSTG_TAB
AS
SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_NAMDINTSTG;

ALTER MATERIALIZED VIEW SUPPLIER_DB_STG.SUPPLIER_SCH.VW_MATVW_ON_NMDINTSTG_TAB
CLUSTER BY (S_NATIONKEY);

ALTER MATERIALIZED VIEW SUPPLIER_DB_STG.SUPPLIER_SCH.VW_ON_TAB_CONTLOAD_USG_SNOWPIPE
CLUSTER BY (S_NATIONKEY);

LIST @%SUPPLIER_USG_TABLE_STG;

COPY INTO @%SUPPLIER_USG_TABLE_STG FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_TABLE_STG;

data_0_0_0.csv.gz;

SELECT COUNT(*) FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_TABLE_STG;

COPY INTO @~ FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_USER_STG;

LIST @~;

COPY INTO @SUPPLIER_DB_STG.SUPPLIER_SCH.EXT_STAGE 
FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO;

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_NAMDINTSTG;

LIST @SUPPLIER_DB_STG.SUPPLIER_SCH.INT_STAGE;

COPY INTO @SUPPLIER_DB_STG.SUPPLIER_SCH.INT_STAGE
FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_NAMDINTSTG;

DROP TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO;
UNDROP TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO;

SELECT COUNT(*) FROM SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO
AT(OFFSET => -60*60*8);

CREATE OR REPLACE TABLE SUPPLIER_DB.SUPPLIER_SCH.CLN_SUPPLIER_BLKLOAD_USG_COPYINTO
CLONE SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO
AT(OFFSET => -60*60*8);

SELECT COUNT(*) FROM SUPPLIER_DB.SUPPLIER_SCH.CLN_SUPPLIER_BLKLOAD_USG_COPYINTO;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO', START_TIME => DATEADD(HOUR, -24, CURRENT_TIMESTAMP())));

list @SUPPLIER_DB_STG.SUPPLIER_SCH.INT_STAGE;

REMOVE @int_stage/data_0_0_0.csv.gz;

LIST @~;
REMOVE @~/data_0_0_0.csv.gz;

COPY INTO @%SUPPLIER_USG_NAMDINTSTG 
FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_NAMDINTSTG;

LIST @%SUPPLIER_USG_NAMDINTSTG;

GRANT USAGE ON WAREHOUSE COMPUTE_WH TO ROLE SYSADMIN;

GRANT CREATE RESOURCE MONITOR ON ACCOUNT TO ROLE SYSADMIN;

TRUNCATE TABLE SUPPLIER_DB.SUPPLIER_SCH.CLN_SUPPLIER_BLKLOAD_USG_COPYINTO;
TRUNCATE TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO;
TRUNCATE TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_CONTLOAD_USG_SNOWPIPE;
TRUNCATE TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_AUTOINCREMENT;
TRUNCATE TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC;
TRUNCATE TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_NAMDINTSTG;
TRUNCATE TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_SEQ;
TRUNCATE TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_TABLE_STG;
TRUNCATE TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_USER_STG;
TRUNCATE TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_WEBUI;
TRUNCATE TABLE SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO;
TRUNCATE TABLE SUPPLIER_DB_STG.SUPPLIER_SCH.SUPPLIER_CONTLOAD_USG_SNOWPIPE;

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC;

CREATE OR REPLACE FUNCTION SUPPLIER_DB_STG.SUPPLIER_SCH.PERIMETER_OF_RECT(LENGTH FLOAT, BREDTH FLOAT)
RETURNS FLOAT
LANGUAGE SQL
AS
$$
2*LENGTH + 2*BREDTH
$$;

SELECT SUPPLIER_DB_STG.SUPPLIER_SCH.PERIMETER_OF_RECT(2.5, 1.5);

GRANT ROLE DEV_ROLE TO USER BASHEER12;

GRANT CREATE RESOURCE MONITOR ON ACCOUNTADMINT TO ROLE SYSADMIN;
REVOKE ROLE SYSADMIN FROM ROLE DEV_ROLE;
GRANT ROLE SYSADMIN TO ROLE DEV_ROLE;
GRANT ROLE SYSADMIN TO USER BASHEER12;
SHOW GRANTS OF ROLE DEV_ROLE;
SHOW GRANTS TO ROLE DEV_ROLE;
SHOW GRANTS ON USER BASHEER12;
SHOW GRANTS ON USER BASHEER;

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_WEBUI;

ALTER VIEW SUPPLIER_DB_STG.SUPPLIER_SCH.VW_MATVW_ON_NMDINTSTG_TAB
CLUSTER BY ;

SELECT GET_DDL('VIEW', 'SUPPLIER_DB_STG.SUPPLIER_SCH.VW_NONMAT_ON_EXTLOC_TAB');

ALTER TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC
CLUSTER BY (S_NATIONKEY);
ALTER TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_WEBUI
CLUSTER BY (S_ACCTBAL);


SELECT COUNT(DISTINCT S_SUPPKEY) FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC;
SELECT COUNT(DISTINCT S_NAME) FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC;
SELECT COUNT(DISTINCT S_ADDRESS) FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC;
SELECT COUNT(DISTINCT S_NATIONKEY) FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC;
SELECT COUNT(DISTINCT S_PHONE) FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC;
SELECT COUNT(DISTINCT S_ACCTBAL) FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC;
SELECT COUNT(DISTINCT S_COMMENT) FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC;

SELECT SYSTEM$CLUSTERING_DEPTH('SUPPLIER_DB.SUPPLIER_SCH.CLN_SUPPLIER_BLKLOAD_USG_COPYINTO');
SELECT SYSTEM$CLUSTERING_DEPTH('SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC');
SELECT SYSTEM$CLUSTERING_DEPTH('SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_WEBUI');

SELECT SYSTEM$CLUSTERING_INFORMATION('SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_WEBUI');
SELECT SYSTEM$CLUSTERING_INFORMATION('SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC');

COPY INTO SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO
(S_SUPPKEY, S_NAME, S_ADDRESS, S_PHONE, S_COMMENT)
FROM (SELECT 
$1::VARCHAR,
$2, $3, $5,$7 FROM @SUPPLIER_DB_STG.SUPPLIER_SCH.EXT_STAGE)
FILE_FORMAT = (FORMAT_NAME = 'SUPPLIER_DB_STG.SUPPLIER_SCH.TSV_FILE_FORMAT')
ON_ERROR = 'ABORT_STATEMENT'
PURGE = TRUE;

SELECT SYSTEM$STREAM_HAS_DATA('SUPPLIER_DB_STG.SUPPLIER_SCH.STRM_ON_SUPPLIER_CONTLOAD_TABLE');

LIST @SUPPLIER_DB_STG.SUPPLIER_SCH.EXT_STAGE;

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO LIMIT 100 OFFSET 950;

CREATE OR REPLACE PIPE SUPPLIER_DB_stg.SUPPLIER_SCH.PIPE_CONTLOAD_USG_INTTABLESTAGE
AUTO_INGEST = FALSE
AS
COPY INTO SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_TABLE_STG
FROM @%SUPPLIER_USG_TABLE_STG
FILE_FORMAT = (FORMAT_NAME = 'SUPPLIER_DB_STG.SUPPLIER_SCH.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE';

SHOW PIPES;

SELECT SYSTEM$PIPE_STATUS('SUPPLIER_DB_STG.SUPPLIER_SCH.PIPE_CONTLOAD_USG_INTTABLESTAGE');
LIST @%SUPPLIER_USG_TABLE_STG;


SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_TABLE_STG;

LIST @~;

CREATE OR REPLACE PIPE SUPPLIER_DB_STG.SUPPLIER_SCH.PIPE_USG_NMDINT_STAGE
AUTO_INGEST = FALSE
AS
COPY INTO SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_NAMDINTSTG
FROM @SUPPLIER_DB_STG.SUPPLIER_SCH.INT_STAGE
FILE_FORMAT = (FORMAT_NAME = 'SUPPLIER_DB_STG.SUPPLIER_SCH.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE';

SELECT SYSTEM$PIPE_STATUS('SUPPLIER_DB_STG.SUPPLIER_SCH.PIPE_USG_NMDINT_STAGE');

SHOW PIPES;

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_NAMDINTSTG;

LIST @SUPPLIER_DB_STG.SUPPLIER_SCH.INT_STAGE;
REMOVE @int_stage/data_0_0_0.csv.gz;

SELECT
  TABLE_NAME,
  RETENTION_TIME
FROM
  information_schema.tables
WHERE
  table_schema = 'SUPPLIER_SCH'
  AND table_name = 'SUPPLIER_BLKLOAD_USG_COPYINTO';

TRUNCATE TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_EXTLOC;
SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_CONTLOAD_USG_SNOWPIPE;
ALTER TABLE SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_BLKLOAD_USG_COPYINTO
SET DATA_RETENTION_TIME_IN_DAYS = 30;
SELECT * FROM SUPPLIER_DB_STG.SUPPLIER_SCH.VW_ON_TAB_CONTLOAD_USG_SNOWPIPE;
SELECT * FROM SUPPLIER_DB_STG.SUPPLIER_SCH.CLN_VW_NONMAT_ON_EXTLOC_TAB;
SELECT * FROM SUPPLIER_DB_STG.SUPPLIER_SCH.VW_MATVW_ON_NMDINTSTG_TAB;

CREATE OR REPLACE VIEW SUPPLIER_DB_STG.SUPPLIER_SCH.CLN_VW_NONMAT_ON_EXTLOC_TAB 
CLONE  SUPPLIER_DB_STG.SUPPLIER_SCH.VW_NONMAT_ON_EXTLOC_TAB;---WE CANNOT CLONE VIEW

SELECT * FROM SUPPLIER_DB_STG.SUPPLIER_SCH.VW_ON_TAB_CONTLOAD_USG_SNOWPIPE
ORDER BY S_NATIONKEY DESC;

DROP VIEW SUPPLIER_DB_STG.SUPPLIER_SCH.CLN_VW_NONMAT_ON_EXTLOC_TAB;

SELECT * FROM SUPPLIER_DB_STG.SUPPLIER_SCH.CLN_VW_NONMAT_ON_EXTLOC_TAB;
SELECT * FROM SUPPLIER_DB_STG.SUPPLIER_SCH.VW_NONMAT_ON_EXTLOC_TAB;

SELECT GET_DDL('VIEW','SUPPLIER_DB_STG.SUPPLIER_SCH.VW_ON_TAB_CONTLOAD_USG_SNOWPIPE');

SHOW GRANTS ON USER BASHEER;
SHOW GRANTS ON USER BASHEER12;

REVOKE ROLE SYSADMIN FROM USER BASHEER12;

SHOW GRANTS OF ROLE DEV_ROLE;
SHOW GRANTS OF ROLE SYSADMIN;

GRANT USAGE ON DATABASE PRACTICE_DB TO ROLE DEV_ROLE;
GRANT USAGE ON SCHEMA PRACTICE_DB.PRACTICE_SCH TO ROLE DEV_ROLE;
GRANT USAGE ON ALL SCHEMAS IN DATABASE PRACTICE_DB TO ROLE DEV_ROLE;
GRANT USAGE ON FUTURE SCHEMAS IN DATABASE PRACTICE_DB TO ROLE DEV_ROLE;
GRANT SELECT ON FUTURE TABLES IN SCHEMA PRACTICE_DB.PRACTICE_SCH TO ROLE DEV_ROLE;
GRANT SELECT ON ALL TABLES IN SCHEMA PRACTICE_DB.PRACTICE_SCH TO ROLE DEV_ROLE;
GRANT SELECT ON PRACTICE_DB.PRACTICE_SCH.CULUMN_WITH_CURRENT_TIMESTAMP TO ROLE DEV_ROLE;

GRANT USAGE ON DATABASE DB_INTERVIEW_QUESTIONS TO SHARE MY_SHARE;
GRANT USAGE ON ALL SCHEMA IN DATABASE DB_INTERVIEW_QUESTIONS TO SHARE MY_SHARE;
GRANT SELECT ON ALL TABLES IN SCHEMA DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE" TO SHARE MY_SHARE;

###################################################################################################################;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT;

SELECT ID, AMOUNT, (SELECT MIN(AMOUNT) FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT GROUP BY ID) OUTPUT 
FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT;--- THIS IS WRONG

SELECT ID, AMOUNT, MIN(AMOUNT) OVER(PARTITION BY ID) OUTPUT 
FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_SALARY_OUTPUT_TABLE;
SELECT *, MAX(SALARY1) OVER() OUTPUT FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_SALARY_OUTPUT_TABLE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.PURCHASE_ORDERS;
SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS;
SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT_TBL
(FIRST_NAME VARCHAR PRIMARY KEY,
LAST_NAME VARCHAR NOT NULL);

INSERT INTO DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT_TBL
(FIRST_NAME, LAST_NAME)
VALUES
('ALICE','SMITH'),
('BOB', 'JONES'),
('BEN', 'JOHNSON'),
('MIKE', 'WHITE');

INSERT  INTO DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT_TBL
(LAST_NAME, FIRST_NAME)
VALUES
('WHITE','MIKE'),
('','MIKE'),
('BASHEER', '');

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT_TBL;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.AMBLICS.STAFFDB
(ID INT, NAME VARCHAR, DEPT VARCHAR, SALARY INT);

INSERT INTO DB_INTERVIEW_QUESTIONS.AMBLICS.STAFFDB
(ID, NAME, DEPT, SALARY)
VALUES
('3211', 'Alice Smith', 'HR', '30000'),
('1239', 'Lisa Davis', 'IT', '70000'),
('2947', 'Bob Jones', 'HR', '30000'),
('1558', 'Mary Brown', 'IT', '50000'),
('3130', 'John Wilson', 'Purchase', '35000'),
('3570', 'Paul Miller', 'IT', '45000');

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STAFFDB;

SELECT * FROM (
SELECT *, CASE WHEN SALARY <= 35000 THEN 'ASSOCIATE' 
                           WHEN SALARY > 35000 <= 50000 THEN 'SR.ASSOCIATE'
                           ELSE 'MANAGER' END AS POST FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STAFFDB)
WHERE POST LIKE 'ASSOCIATE';


WITH CTE AS
(SELECT *, CASE WHEN SALARY <= 35000 THEN 'ASSOCIATE' 
                           WHEN SALARY BETWEEN 35000 AND 45000 THEN 'SR.ASSOCIATE'
                           ELSE 'MANAGER' END AS POST FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STAFFDB)
SELECT * FROM CTE ;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS;

SELECT E.EMPLOYEE_NAME CATEGORY_NAME, C.EMPLOYEE_NAME EMPLOYEE_NAME FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS E LEFT JOIN DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS C
ON E.CATEGORY_ID = C.ID;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT;

SELECT NAME, ID FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT
WHERE NAME LIKE 'A%a';

SELECT NAME, ID FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT
WHERE NAME LIKE 'A%'
           AND NAME LIKE'%a';

SELECT NAME, ID FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT
WHERE NAME LIKE 'A%'
           OR NAME LIKE'%a';

CREATE OR REPLACE PROCEDURE PRACTICE_DB.PRACTICE_SCH.PROC_TO_COUNT_NOOFROWS_IN_TAB(P_DB VARCHAR, P_SCH VARCHAR, P_TAB VARCHAR)
RETURNS TABLE(NO_OF_ROWS INT)
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'SELECT COUNT(*) FROM '||:P_DB||'.'||:P_SCH||'.'||:P_TAB;
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN TABLE(RES);
END;
$$;

CALL PRACTICE_DB.PRACTICE_SCH.PROC_TO_COUNT_NOOFROWS_IN_TAB('SUPPLIER_DB','SUPPLIER_SCH', 'SUPPLIER_CONTLOAD_USG_SNOWPIPE');

CREATE OR REPLACE PROCEDURE PRACTICE_DB.PRACTICE_SCH.PROC_TRUNCATE_TABLE(P_DB VARCHAR, P_SCH VARCHAR, P_TAB VARCHAR)
RETURNS STRING 
LANGUAGE SQL
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
BEGIN
SELECT_STATEMENT := 'TRUNCATE TABLE '||:P_DB||'.'||:P_SCH||'.'||:P_TAB;
EXECUTE IMMEDIATE : SELECT_STATEMENT;
RETURN 'DONE';
END;
$$;

CALL PRACTICE_DB.PRACTICE_SCH.PROC_TRUNCATE_TABLE('SUPPLIER_DB', 'SUPPLIER_SCH', 'SUPPLIER_CONTLOAD_USG_SNOWPIPE');

SELECT * FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.EMPLOYEE;

SELECT EMP_ID, DEPT_ID FROM (
SELECT *, DENSE_RANK() OVER(PARTITION BY DEPT_ID ORDER BY SALARY DESC) DR FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.EMPLOYEE) E
WHERE DR = 1;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE;
SELECT * FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE_BKP;

SELECT ID, CASE WHEN STUDENT = 'RAM' THEN 'SHYAM'
                WHEN STUDENT = 'SHYAM' THEN 'RAM'
                WHEN STUDENT = 'VAIBHAV' THEN 'GOVIND'
                WHEN STUDENT = 'GOVIND' THEN 'VAIBHAV'
                ELSE STUDENT
                END AS STUDENT FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE;


UPDATE DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE_BKP
SET STUDENT = CASE WHEN STUDENT = 'SHYAM' THEN 'RAM'
                   WHEN STUDENT = 'RAM' THEN 'SHYAM'
                   WHEN STUDENT = 'GOVIND' THEN 'VAIBHAV'
                   WHEN STUDENT = 'VAIBHAV' THEN 'GOVIND'
                   ELSE STUDENT 
                   END;

SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.CUSTOMER;
SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.ORDERS;
SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES;

SELECT DRUG, TOTAL_PROFIT FROM (
SELECT *, (TOTAL_SALES - COGS) TOTAL_PROFIT FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES)
ORDER BY TOTAL_PROFIT DESC
LIMIT 3;

SELECT O.ORD_NO, O.PURCH_AMT, C.CUST_NAME, C.CITY FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.ORDERS O
INNER JOIN DB_INTERVIEW_QUESTIONS.CAPGEMINI.CUSTOMER C ON O.CUSTOMER_ID = C.CUST_ID
WHERE PURCH_AMT BETWEEN 500 AND 2000;

SELECT * FROM DB_INTERVIEW_QUESTIONS.DELOITTE.VERTICAL_INP_HOR_OUT;
SELECT LISTAGG(ID,',') FROM DB_INTERVIEW_QUESTIONS.DELOITTE.VERTICAL_INP_HOR_OUT;

SELECT * FROM DB_INTERVIEW_QUESTIONS.DELOITTE.SOURCE;
SELECT * FROM DB_INTERVIEW_QUESTIONS.DELOITTE.TARGET;

SELECT COUNT(*) FROM DB_INTERVIEW_QUESTIONS.DELOITTE.SOURCE S CROSS JOIN DB_INTERVIEW_QUESTIONS.DELOITTE.TARGET T
ON S.ID = T.ID;

(SELECT ID FROM DB_INTERVIEW_QUESTIONS.DELOITTE.SOURCE
EXCEPT
SELECT ID FROM DB_INTERVIEW_QUESTIONS.DELOITTE.TARGET)
UNION 
(SELECT ID FROM DB_INTERVIEW_QUESTIONS.DELOITTE.TARGET
EXCEPT 
SELECT ID FROM DB_INTERVIEW_QUESTIONS.DELOITTE.SOURCE);

CREATE OR REPLACE PROCEDURE PRACTICE_DB.PRACTICE_SCH.LARGE_NUM_FROM_TWO_NUMBERS(P1 INT, P2 INT)
RETURNS TABLE(LARGE_NUM INT)
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'SELECT CASE WHEN '||:P1||'>'||:P2||' THEN '||:P1||'
                                  ELSE '||:P2||'
                                  END FROM DUAL';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN TABLE(RES);
END;
$$;

CALL PRACTICE_DB.PRACTICE_SCH.LARGE_NUM_FROM_TWO_NUMBERS('32', '33');

SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_BKP;
INSERT INTO DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS
SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_BKP;

SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_DJFLDK
AS
SELECT DISTINCT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS;

SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_DJFLDK;

DELETE FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_DJFLDK
WHERE ID NOT IN (SELECT MIN(ID) FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_DJFLDK
                  GROUP BY MODEL, BRAND);
SELECT * FROM DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.SALES;

SELECT PRODUCT_ID, SUM(TOTAL_AMOUNT) TOTAL_REVENUE FROM DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.SALES
WHERE EXTRACT(MONTH FROM SALES_DATE) = '05'
GROUP BY PRODUCT_ID;

SELECT *, SUM(TOTAL_AMOUNT) OVER(PARTITION BY PRODUCT_ID) TOTAL_REVENUE FROM DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.SALES
WHERE EXTRACT(MONTH FROM SALES_DATE) = '05';

SELECT * FROM (
SELECT *, SUM(S.QUANTITY) OVER(PARTITION BY S.PRODUCT_ID) TOTAL_QUANTITY FROM DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.SALES S
INNER JOIN DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.PRODUCT P ON S.PRODUCT_ID = P.PRODUCT_ID) X
WHERE EXTRACT(MONTH FROM X.SALES_DATE) = '05';

SELECT P.PRODUCT_ID, P.PRODUCT_NAME, SUM(S.QUANTITY) TOTAL_QUANTITY FROM DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.PRODUCT P
INNER JOIN DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.SALES S
ON S.PRODUCT_ID = P.PRODUCT_ID
WHERE EXTRACT(MONTH FROM S.SALES_DATE) = '05'
GROUP BY P.PRODUCT_ID, P.PRODUCT_NAME
ORDER BY TOTAL_QUANTITY DESC
LIMIT 1;

SELECT * FROM DB_INTERVIEW_QUESTIONS.MPHASIS.MASKING_POLICY_YASH_DUP_BKP;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TCS.CITY;

SELECT NAME FROM DB_INTERVIEW_QUESTIONS.TCS.CITY
LIMIT 1
OFFSET 6;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TCS.TABLEA A
FULL OUTER JOIN DB_INTERVIEW_QUESTIONS.TCS.TABLEB B
ON A.ID = B.ID;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU;

SELECT *, AVG(MARKS) OVER(PARTITION BY STU_ID, STU_NAME) AVG_MARKS FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU;

SELECT STU_ID, STU_NAME, AVG(MARKS) AVG_MARKS FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU
GROUP BY STU_ID, STU_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.EMPLOYEE;

SELECT *EXCLUDE(DR) FROM (
SELECT *, DENSE_RANK() OVER(PARTITION BY DEPT ORDER BY SALARY DESC) DR FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.EMPLOYEE E) X
WHERE X.DR = 1;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER;

(SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE
EXCEPT
SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE)
UNION
(SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE
EXCEPT
SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE);

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE;

SELECT X.EMP_ID, X.EMP_NAME, X.SALARY FROM 
(SELECT *, DENSE_RANK() OVER(ORDER BY SALARY ASC) DR FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE) X
WHERE DR = 5;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER;

UPDATE DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER
SET STATE = (CASE WHEN STATE = 'NEWYORK' THEN 'Texas'
                  WHEN STATE = 'Texas' THEN 'NEWYORK'
                  WHEN STATE = 'Multan' THEN 'Karachi'
                  ELSE STATE
                  END);

  SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2;

  SELECT DEPARTMENT, COUNT(EMP_ID) TOTAL_EMPLOYEES 
  FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2
  WHERE SALARY > 10000
  GROUP BY DEPARTMENT
  HAVING TOTAL_EMPLOYEES > 1;

  SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.SALES;

  SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.VENDOR;


  UPDATE DB_INTERVIEW_QUESTIONS.TURING.SALES
  SET TOTAL_PROFIT = S.SALES_AMOUNT - V.PURCHASE_AMT
  FROM DB_INTERVIEW_QUESTIONS.TURING.SALES S
  INNER JOIN DB_INTERVIEW_QUESTIONS.TURING.VENDOR V
  ON V.SALES_ID = S.SALES_ID;

  INSERT INTO DB_INTERVIEW_QUESTIONS.TURING.SALES
  (TOTAL_PROFIT)
  SELECT 
  (S.SALES_AMOUNT-V.PURCHASE_AMT)
  FROM DB_INTERVIEW_QUESTIONS.TURING.SALES S
  INNER JOIN DB_INTERVIEW_QUESTIONS.TURING.VENDOR V
  ON V.SALES_ID = S.SALES_ID;

  SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.SALES;

  SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE;
  
  SELECT CUST_ID, CUST_NAME, INVOICE_ID 
  FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE 
  WHERE INVOICE_AMT >= (SELECT AVG(INVOICE_AMT) FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE);

  SELECT EMP_ID, EMP_NAME, DEPT, SALARY FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE
  WHERE SALARY >=  
  (SELECT AVG(SALARY) FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE);

  SELECT * FROM DB_INTERVIEW_QUESTIONS.VIRTUSA.COUNTRY_MEDALS_TABLE;
  SELECT COUNTRY, MEDALS FROM DB_INTERVIEW_QUESTIONS.VIRTUSA.COUNTRY_MEDALS_TABLE
  ORDER BY CASE WHEN COUNTRY LIKE 'INDIA' THEN '1'
                ELSE 2
                END, MEDALS DESC;

list @SUPPLIER_DB_STG.SUPPLIER_SCH.INT_STAGE;

COPY INTO SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_NAMDINTSTG
(S_SUPPKEY, S_NAME, S_NATIONKEY, S_ACCTBAL, S_COMMENT)
FROM (SELECT $1, $2, $4, $6, $7 FROM @SUPPLIER_DB_STG.SUPPLIER_SCH.INT_STAGE)
FILE_FORMAT = (FORMAT_NAME = 'SUPPLIER_DB_STG.SUPPLIER_SCH.TSV_FILE_FORMAT')
ON_ERROR = 'ABORT_STATEMENT'
PURGE = TRUE;

SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_NAMDINTSTG;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'SUPPLIER_DB.SUPPLIER_SCH.SUPPLIER_USG_NAMDINTSTG', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.CLASS;
SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL;
CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.STUDENT1
AS
SELECT STU_ROLL, STU_NAME, STU_PHNO FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL
WHERE STU_NAME LIKE '%VISHAL%' AND STU_CLASS LIKE '07';
SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.STUDENT;

INSERT INTO DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL
(STU_ROLL, STU_NAME, STU_PHNO, STU_CLASS, STU_CLASS_TEACHER)
VALUES
('1001', 'BASHEER', '234', '07', 'KHAN SIR'),
('1002', 'AMEER', '567', '07', 'NAVEEN'),
('1003', 'SHAIK MD BASHEERUDDIN', '1234', '06', 'SAROJ'),
('1004', 'RAJU', '7876', '07', 'VIPIN'),
('1005', 'BASHEER AHMED', '2498', '07', 'ANKIT'),
('1006', 'ANAND', '3256', '07', 'GAURAV'),
('1007', 'SAHIK BASHEER', '6532', '10', 'KUMAR'),
('1008', 'VIJAY', '1956', '08', 'NEELIMA'),
('1009', 'BASHEERUDDIN', '4352', '07', 'ALEKHYA'),
('1010', 'UMA KANTH', '9012', '09', 'MENAKA');

SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL;

INSERT INTO DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.CLASS
(STU_ROLL, STU_CLASSTEACHER, STU_SECTION)
VALUES
('1001','KHAN SIR', 'D'),
('1002','NAVEEN', 'D'),
('1003','SAROJ', 'A'),
('1004', 'VIPIN', 'E'),
('1005','ANKIT', 'D'),
('1006','GAURAV', 'D'),
('1007','KUMAR', 'D'),
('1008','NEELIMA', 'D'),
('1009','ALEKHYA', 'D'),
('1010','MENAKA', 'E');

SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.CLASS;

SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.STUDENT1
AS
SELECT STU_ROLL, STU_NAME, STU_PHNO FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL
WHERE STU_NAME LIKE '%BASHEER%' AND STU_CLASS LIKE '07';

SELECT S.STU_ROLL, S.STU_NAME, S.STU_PHNO, S.STU_CLASS, C.STU_CLASSTEACHER, C.STU_SECTION 
FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL S
INNER JOIN DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.CLASS C
ON C.STU_ROLL = S.STU_ROLL
WHERE STU_NAME LIKE '%BASHEER%' AND STU_CLASS LIKE '07' AND STU_SECTION LIKE 'D';

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.INFORMATION;

SELECT SCHEMA_NAME, TABLE_NAME, LISTAGG(COLUMN_NAME, ',') 
FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.INFORMATION
GROUP BY SCHEMA_NAME, TABLE_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.JOB_TITLE;

SELECT JOB_TITLE FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.JOB_TITLE
ORDER BY CASE WHEN JOB_TITLE LIKE 'DOCTOR' THEN '1'
              ELSE 2
              END, JOB_TITLE ASC;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABA;
SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABB;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABA A
LEFT OUTER JOIN DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABB B
ON A.ID = B.IB;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

SELECT *, ROW_NUMBER() OVER(ORDER BY NAME) RN FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH
(ID INT, NAME VARCHAR, DEPT VARCHAR,SALARY INT);

INSERT INTO DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH 
(ID, NAME, DEPT, SALARY) 
VALUES 
('1001', 'Sam', 'Finance', '6000'),
('1002', 'Samuel', 'Finance', '7000'),
('1003', 'Jogesh', 'HR', '14000'),
('1004', 'Basheer', 'HR', '15000'),
('1005', 'Raju', 'Marketing', '12000'),
('1006', 'Anand', 'Marketing', '13000'),
('1007', 'Vijay', 'Sales', '2000'),
('1008', 'Prasad', 'Sales', '5000'),
('1009', 'Dharma','Sales', '3000'),
('1010', 'Naik', 'Sales', '4000');

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH AT(OFFSET => -60*10);
SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH BEFORE(STATEMENT => '01b03596-3200-ec56-0006-29b20010d23e');

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

SELECT *EXCLUDE(SECOND_EMPLOYEE) FROM 
(SELECT *, ROW_NUMBER() OVER(PARTITION BY DEPT ORDER BY ID) SECOND_EMPLOYEE FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH) X 
WHERE X.SECOND_EMPLOYEE = 2;

SELECT *EXCLUDE(SECOND_HIGHEST_SALARY) FROM (
SELECT *, DENSE_RANK() OVER(PARTITION BY DEPT ORDER BY SALARY DESC) SECOND_HIGHEST_SALARY
FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH) X
WHERE X.SECOND_HIGHEST_SALARY = 2;

SELECT *, RANK() OVER(PARTITION BY DEPT ORDER BY SALARY) R FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

SELECT *, LEAD(ID) OVER(PARTITION BY DEPT ORDER BY ID) NXT_EMP_ID FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

SELECT *, LAG(SALARY) OVER(PARTITION BY DEPT ORDER BY ID) PRV_EMP_SALARY 
FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

SELECT DEPT, COUNT(ID) NO_OF_EMPLOYEES 
FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH 
GROUP BY DEPT;

SELECT *, COUNT(ID) OVER(PARTITION BY DEPT) NO_OF_EMPLS FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;
SELECT *, MIN(SALARY) OVER(PARTITION BY DEPT) MIN_SALARY FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

SELECT DEPT, MIN(SALARY) MIN_SAL FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH 
GROUP BY DEPT;

SELECT DEPT, AVG(SALARY) AVG_SALARY FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH
GROUP BY DEPT;

SELECT *, MAX(SALARY) OVER(PARTITION BY DEPT) MAX_SALARY 
FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

SELECT *, SUM(SALARY) OVER(PARTITION BY DEPT) TOTAL_SALARY 
FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;

SELECT DEPT, SUM(SALARY) TOAL_SALARY FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH
GROUP BY  DEPT;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.ADDING_FIRST_MIDDLE_LAST_NAME;

SELECT INITCAP(FIRST_NAME)||' '||INITCAP(MIDDLE_NAME)||' '||INITCAP(LAST_NAME) FULL_NAME 
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.ADDING_FIRST_MIDDLE_LAST_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS;

SELECT MAX(BIGGEST_NUM) LARGE_NUM FROM 
(SELECT A BIGGEST_NUM FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS
UNION 
SELECT B FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS
UNION
SELECT C FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS);

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."BUS BOOKING STATUS";

SELECT *, CASE WHEN TOTAL_SEATS = SEATS_SOLD THEN 'BUS_FULL'
                WHEN TOTAL_SEATS < SEATS_SOLD THEN 'OVER BOOKING'
                WHEN (TOTAL_SEATS-SEATS_SOLD)<= 10 THEN 'FAST BOOKING'
                ELSE 'SEATS_AVAILABLE'
                END STATUS 
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."BUS BOOKING STATUS";

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200;

SELECT A, COUNT(A) FROM (
SELECT A FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200
UNION ALL
SELECT B FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200
UNION ALL
SELECT C FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200
)
GROUP BY A;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T;

ALTER TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T
RENAME TO "UNDROP TABLE EMPLOYEE_T";
UNDROP DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T;
SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_TT;
SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_TTT;
DROP TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T;
DROP TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_TT;
DROP TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_TTT;

SELECT LISTAGG(NAME,' ') TOTAL_NAME, TOWN FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T
GROUP BY TOWN;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T
AS
SELECT * FROM SUPPLIER_DB.SUPPLIER_SCH."UNDROP TABLE EMPLOYEE_T";

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD;

SELECT *EXCLUDE(RN) FROM (
SELECT *, ROW_NUMBER()OVER(ORDER BY ID) RN 
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD)
WHERE RN <=  10;

TRUNCATE TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T
AT(OFFSET => -60*5);

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.CLN_EMPLOYEE_T
CLONE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.EMPLOYEE_T
AT(OFFSET => -60*5);

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.CLN_EMPLOYEE_T;
ALTER TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.CLN_EMPLOYEE_T
RENAME TO "UNDROP TABLE OR USG TIME TRAVEL";

SELECT MOD('50','2') FROM DUAL;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS";

SELECT COL, COUNT(COL) FROM (
SELECT COL1 COL FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS"
UNION ALL
SELECT COL2 FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS"
UNION ALL
SELECT COL3 FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS"
UNION ALL
SELECT COL4 FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS")
WHERE COL LIKE 'P'
GROUP BY COL;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SEPERATION_OF_INR500;

SELECT TRIM(REGEXP_REPLACE(PRICE,'[A-Z ]','')) ONLY_AMOUNT FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SEPERATION_OF_INR500;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SPLITTING_OF_NAME;

SELECT REGEXP_INSTR('SHAIK MOHAMMED BASHEERUDDIN',' ');

SELECT SUBSTR(NAME,1,REGEXP_INSTR(NAME,' ')-1) FIRST_NAME, SUBSTR(NAME,REGEXP_INSTR(NAME,' ')+1, REGEXP_INSTR(NAME,' ',1,3)) MIDDLE_NAME 
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SPLITTING_OF_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.TEST;

SELECT SUM(CASE WHEN AMOUNT > 0 THEN AMOUNT ELSE '0' END) POSITIVE_SUM,
SUM(CASE WHEN AMOUNT < 0 THEN AMOUNT ELSE '0' END) NEGETIVE_SUM 
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.TEST;


SELECT REGEXP_INSTR('SHAIK MOHAMMED BASHEERUDDIN','A',1,3);
SELECT REGEXP_INSTR('SHAIK MOHAMMED SHAMSHUDDIN','A',1,3);

SELECT COUNT(*) FROM DUAL  WHERE NULL IS NULL;

SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CATALOG_PAGE;

CREATE DATABASE HYD;
CREATE SCHEMA HYD.DATALOADS;

CREATE OR REPLACE TABLE HYD.DATALOADS.CATALOG_TABLE
AS 
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CATALOG_PAGE
LIMIT 924;

SELECT * FROM HYD.DATALOADS.CATALOG_TABLE;

SELECT GET_DDL('TABLE', 'HYD.DATALOADS.CATALOG_TABLE');

Create or replace TABLE HYD.DATALOADS.CATALOG_TABLE (
	CP_CATALOG_PAGE_SK VARCHAR,
	CP_CATALOG_PAGE_ID VARCHAR,
	CP_START_DATE_SK VARCHAR,
	CP_END_DATE_SK VARCHAR,
	CP_DEPARTMENT VARCHAR,
	CP_CATALOG_NUMBER VARCHAR,
	CP_CATALOG_PAGE_NUMBER VARCHAR,
	CP_DESCRIPTION VARCHAR,
	CP_TYPE VARCHAR
);

CREATE OR REPLACE DATABASE HYD_TAR;
CREATE OR REPLACE SCHEMA HYD_TAR.DATALOADS;
CREATE OR REPLACE TABLE HYD_TAR.DATALOADS.CATALOG_PAGE(
	CP_CATALOG_PAGE_SK NUMBER,
	CP_CATALOG_PAGE_ID VARCHAR,
	CP_START_DATE_SK NUMBER,
	CP_END_DATE_SK NUMBER,
	CP_DEPARTMENT VARCHAR,
	CP_CATALOG_NUMBER NUMBER,
	CP_CATALOG_PAGE_NUMBER NUMBER,
	CP_DESCRIPTION VARCHAR,
	CP_TYPE VARCHAR
);


SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT;

SELECT *, MIN(AMOUNT) OVER(PARTITION BY ID) MIN_AMT FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT;
SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.PURCHASE_ORDERS;

SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_BKP
AS
SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS;

DELETE FROM
(WITH CTE AS 
(SELECT *, ROW_NUMBER() OVER(ORDER BY ID) RN 
FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_BKP))
WHERE RN NOT IN MIN(RN) 
GROUP BY ID;

DELETE FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY ID) RN 
FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_BKP) K
WHERE K.RN NOT IN ( SELECT MIN(K.RN) FROM K GROUP BY ID); 

DELETE FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_BKP
WHERE ;

ALTER TABLE DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_BKP
ADD COLUMN RN INT AUTOINCREMENT START 1 INCREMENT 1;

SELECT * FROM DB_INTERVIEW_QUESTIONS."DUPLICATE RECORDS DELETE".CARS_DJFLDK;

CREATE OR REPLACE PROCEDURE PRACTICE_DB.PRACTICE_SCH.COUNT_NO_OF_COLUMNS(P_DB VARCHAR, P_SCH VARCHAR, P_TAB VARCHAR)
RETURNS TABLE(NO_OF_COLUMNS INT)
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE 
SELECT_STATEMENT2 VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT2 := 'SELECT COUNT(*) FROM '||:P_DATABASE||'.'||INFORMATION_SCHEMA.COLUMNS||' WHERE TABLE_NAME='||:P_TABLE||'';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT2);
RETURN TABLE(RES);
END;
$$;

CALL PRACTICE_DB.PRACTICE_SCH.COUNT_NO_OF_COLUMNS('SUPPLIER_DB_STG', 'SUPPLIER_SCH', 'SUPPLIER_CONTLOAD_USG_SNOWPIPE');

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_SALARY_OUTPUT_TABLE;

SELECT *, MAX(SALARY1) OVER() OUTPUT FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_SALARY_OUTPUT_TABLE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT;

SELECT *, MIN(AMOUNT) OVER(PARTITION BY ID) OUTPUT FROM DB_INTERVIEW_QUESTIONS.AMBLICS.ID_AMOUNT_OUTPUT;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.PURCHASE_ORDERS;

CREATE OR REPLACE TABLE NOTNULL_TAB1
(ID INT ,
NAME VARCHAR);

INSERT INTO NOTNULL_TAB
( NAME)
VALUES
( 'FARIDA');

SELECT * FROM HYD_TAR.DATALOADS.NOTNULL_TAB1;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STAFFDB;
SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT;
SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT_TBL;

CREATE OR REPLACE MASKING POLICY POLICY_NAME
AS
(COL VARCHAR) RETURNS VARCHAR ->
CASE WHEN CURRENT_ROLE() IN ('SYSADMIN') THEN COL
ELSE '****'
END;

ALTER TABLE DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT_TBL
MODIFY COLUMN LAST_NAME
SET MASKING POLICY POLICY_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.SALARY_FOR_JOINS;
SELECT * FROM DB_INTERVIEW_QUESTIONS.AMBLICS.STUDENT;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.EMPLOYEE;
SELECT * FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE_BKP;
SELECT * FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE_BKP
ORDER BY CASE WHEN STUDENT = 'RAM' THEN '2'
              WHEN STUDENT = 'SHYAM' THEN '1'
              WHEN STUDENT = 'VAIBHAV' THEN '4'
              WHEN STUDENT = 'KRISHNA' THEN '3'
              ELSE STUDENT
              END;

UPDATE DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.ID_STUDENT_TABLE_BKP 
SET STUDENT = 
CASE WHEN STUDENT = 'RAM' THEN 'SHYAM'
              WHEN STUDENT = 'SHYAM' THEN 'RAM'
              WHEN STUDENT = 'VAIBHAV' THEN 'KRISHNA'
              WHEN STUDENT = 'KRISHNA' THEN 'VAIBHAV'
              ELSE STUDENT
              END;

SELECT *EXCLUDE(HIGHEST_SALARY) FROM (
SELECT *, DENSE_RANK() OVER(PARTITION BY DEPT_ID ORDER BY SALARY DESC) HIGHEST_SALARY FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.EMPLOYEE)
WHERE HIGHEST_SALARY = '1';

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.ADDING_FIRST_MIDDLE_LAST_NAME;
SELECT ID, CONCAT(INITCAP(FIRST_NAME),' ',INITCAP(MIDDLE_NAME),' ',INITCAP(LAST_NAME)) 
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.ADDING_FIRST_MIDDLE_LAST_NAME;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS;

SELECT MAX(D) FROM (
SELECT A  D FROM  DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS
UNION ALL
SELECT B FROM  DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS
UNION ALL
SELECT C FROM  DB_INTERVIEW_QUESTIONS.BOMMISHETTY.BIGGEST_NUM_FROM_THREE_COLUMNS);

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."BUS BOOKING STATUS";

SELECT BUS_NO FROM(
SELECT *, CASE WHEN TOTAL_SEATS < SEATS_SOLD THEN 'OVER_BOOKED'
               WHEN TOTAL_SEATS = SEATS_SOLD THEN 'SEATS_ARE_FULL'
               WHEN TOTAL_SEATS - SEATS_SOLD <= 10 THEN 'FASTLY_BOOKING'
               ELSE 'SEATS_ARE_AVAILABLE'
               END BOOKING_STATUS FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."BUS BOOKING STATUS")
WHERE BOOKING_STATUS = 'SEATS_ARE_AVAILABLE';

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200;

SELECT D, COUNT(D) FROM (
SELECT A D FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200
UNION ALL
SELECT B FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200
UNION ALL
SELECT C FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.COUNT_OF_NO_OF_100_200)
GROUP BY D;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.TEST;
SELECT SUM(CASE WHEN AMOUNT >= 0 THEN AMOUNT
                ELSE 0
                END) POS_SUM, SUM(CASE WHEN AMOUNT< 0 THEN AMOUNT
                ELSE 0
                END) NEG_SUM FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.TEST;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SEPERATION_OF_INR500;

SELECT TRIM(REGEXP_REPLACE(PRICE,'[A-Z    ]')) FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SEPERATION_OF_INR500;

SELECT PRICE, REGEXP_REPLACE(PRICE, '[A-Z .]') FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SEPERATION_OF_INR500;

SELECT * FROM DB_INTERVIEW_QUESTIONS.DELOITTE.SOURCE;
SELECT * FROM DB_INTERVIEW_QUESTIONS.DELOITTE.TARGET;
SELECT * FROM DB_INTERVIEW_QUESTIONS.DELOITTE.VERTICAL_INP_HOR_OUT;
SELECT LISTAGG(ID, ',') FROM DB_INTERVIEW_QUESTIONS.DELOITTE.VERTICAL_INP_HOR_OUT;
SELECT * FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU;
SELECT  *,  AVG(MARKS) OVER() AVG_MARKS FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU;
SELECT * FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.EMPLOYEE;
SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.YASH;
SELECT * FROM DB_INTERVIEW_QUESTIONS.BLUECLOUD_ITC_INFOTECH.EMPLOYEE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD ORDER BY ID;

INSERT INTO DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD
(ID, NAME, GENDER, CITY, STATE, PINCODE)
VALUES
('11', 'BASHA', 'MALE', 'KURNOOL', 'AP', '518003'),
('12', 'AKBAR', 'MALE', 'ANANTAPUR', 'AP', '518003'),
('13', 'SAHIL', 'MALE', 'NANDYAL', 'AP', '584231'),
('14', 'AKSHAY', 'MALE', 'RAJENDRA_NAGAR', 'BIHAR', '625489'),
('15', 'PRIYANKA', 'FEMALE', 'JHANSI', 'UP', '784231'),
('16', 'KANCHANA', 'FEMALE', 'GWALIOR', 'MP', '254369'),
('17', 'CHNDRAMUKHI', 'FEMALE', 'JAIPUR', 'RAJASTAN', '784236'),
('18', 'RITY DESAI', 'FEMALE', 'SECUNDRABAD', 'TELANGANA', '456237'),
('19', 'JAYANTHI', 'FEMALE', 'CHANGALPAT', 'TAMILNADU', '528641'),
('20', 'DESAI', 'FEMALE', 'YESHWANTAPUR', 'KARNATAKA', '569874');

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD2
AS
SELECT DISTINCT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD2 ORDER BY ID;

TRUNCATE TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD;
INSERT INTO DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD
SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD2;

ALTER TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD
ADD COLUMN RN INT AUTOINCREMENT START=1 INCREMENT=1;

SELECT *, DENSE_RANK() OVER( ORDER BY ID ASC) DR 
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD;
DELETE FROM SELECT *, DENSE_RANK() OVER( ORDER BY ID ASC) DR 
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD
WHERE DR NOT IN (SELECT MIN(DR) FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD
                 GROUP BY ID);

DROP TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD2;
DROP TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD1;
UNDROP TABLE DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD1;
SELECT *EXCLUDE(DR) FROM (
SELECT *, DENSE_RANK() OVER(ORDER BY ID) DR FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.FETCHING_50PERC_RECORD)
WHERE DR <= 10;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS";

SELECT COUNT(COL) FROM (
SELECT COL1 COL FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS"
UNION ALL
SELECT COL2 FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS"
UNION ALL
SELECT COL3 FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS"
UNION ALL 
SELECT COL4 FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY."NO OF P'S AFTER COMB ALL COLMS")
WHERE COL = 'P'
GROUP BY COL;

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SPLITTING_OF_NAME;

SELECT SUBSTR(NAME, 1, REGEXP_INSTR(NAME,' ')-1) FIRST_NAME, SUBSTR(NAME, REGEXP_INSTR(NAME, ' ')+1) LAST_NAME
FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.SPLITTING_OF_NAME;

SELECT SUBSTR('SHAIK BASHEERUDDIN', '1', '6') FROM DUAL;
SELECT REGEXP_INSTR('SHAIK BASHEERUDDIN', 'A');

SELECT * FROM DB_INTERVIEW_QUESTIONS.BOMMISHETTY.TEST;

SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.CUSTOMER;

SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES;

SELECT *, (TOTAL_SALES - COGS) TOTAL_PROFIT
FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.PHARMACY_SALES
ORDER BY TOTAL_PROFIT DESC
LIMIT 3;

SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.CUSTOMER;
SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.ORDERS;

SELECT * FROM DB_INTERVIEW_QUESTIONS.CAPGEMINI.ORDERS O
INNER JOIN DB_INTERVIEW_QUESTIONS.CAPGEMINI.CUSTOMER C
ON C.CUST_ID = O.CUSTOMER_ID
WHERE PURCH_AMT BETWEEN 500 AND 2000;

SELECT * FROM DB_INTERVIEW_QUESTIONS.DELOITTE.VERTICAL_INP_HOR_OUT;
SELECT LISTAGG(ID,',') FROM DB_INTERVIEW_QUESTIONS.DELOITTE.VERTICAL_INP_HOR_OUT;

SELECT * FROM DB_INTERVIEW_QUESTIONS.DELOITTE.SOURCE;
SELECT * FROM DB_INTERVIEW_QUESTIONS.DELOITTE.TARGET;

SELECT * FROM DB_INTERVIEW_QUESTIONS.DELOITTE.SOURCE S
JOIN DB_INTERVIEW_QUESTIONS.DELOITTE.TARGET T
ON S.ID = T.ID;

CREATE OR REPLACE PROCEDURE PRACTICE_DB.PRACTICE_SCH.GREATEST_OF_TWO_NUMBERS(NUM1 INT, NUM2 INT)
RETURNS TABLE(GREATER_NUMBER INT)
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'SELECT CASE WHEN '||:NUM1||' > '||:NUM2||' THEN '||:NUM1||'
                                ELSE '||:NUM2||'
                                END FROM DUAL';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN TABLE(RES);
END;
$$;

CALL PRACTICE_DB.PRACTICE_SCH.GREATEST_OF_TWO_NUMBERS(6, 5);

SELECT 'sql' FROM DUAL
UNION 
SELECT NULL FROM DUAL;

SELECT 1 FROM DUAL
UNION 
SELECT NULL FROM DUAL;

SELECT 'sql' FROM DUAL
UNION 
SELECT 1 FROM DUAL;

SELECT 'sql' FROM DUAL
UNION 
SELECT '1' FROM DUAL;

SELECT * FROM DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.PRODUCT;
SELECT * FROM DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.SALES;

SELECT PRODUCT_ID, MAX(TOTAL_AMOUNT) TOTAL_SALES_REVENUE 
FROM DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.SALES
WHERE EXTRACT(MONTH FROM SALES_DATE) = '05'
GROUP BY PRODUCT_ID;

SELECT X.PRODUCT_ID, X.PRODUCT_NAME FROM ( 
SELECT P.PRODUCT_ID, P.PRODUCT_NAME, SUM(S.QUANTITY) TOTAL_QUANTITY 
FROM DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.PRODUCT P
INNER JOIN DB_INTERVIEW_QUESTIONS.KPI_CAPITALS.SALES S
ON P.PRODUCT_ID = S.PRODUCT_ID 
WHERE EXTRACT(MONTH FROM S.SALES_DATE) = '05'
GROUP BY P.PRODUCT_ID, P.PRODUCT_NAME
ORDER BY TOTAL_QUANTITY DESC
LIMIT 1) X;

SELECT NAME FROM DB_INTERVIEW_QUESTIONS.TCS.CITY
LIMIT 1
OFFSET 6;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TCS.TABLEA A
 FULL JOIN 
 DB_INTERVIEW_QUESTIONS.TCS.TABLEB B
 ON A.ID = B.ID;

 SELECT * FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.EMPLOYEE;

 SELECT *, DENSE_RANK() OVER(PARTITION BY DEPT ORDER BY SALARY DESC) DR 
 FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.EMPLOYEE;

 SELECT EMP_ID, EMP_NAME FROM (
 SELECT *, ROW_NUMBER() OVER(PARTITION BY DEPT ORDER BY EMP_ID) SENIOR_EMPLOYEE
 FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.EMPLOYEE)
 WHERE SENIOR_EMPLOYEE = '1';

 SELECT EMP_ID, EMP_NAME, SALARY, NEXT_EMP_SALARY FROM (
 SELECT *, LAG(SALARY) OVER(PARTITION BY DEPT ORDER BY EMP_ID) NEXT_EMP_SALARY 
 FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.EMPLOYEE);

 SELECT * FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU;

 SELECT MAX(TOTAL_MARKS) TOPPER FROM (
 SELECT STU_ID, STU_NAME,  SUM(MARKS) TOTAL_MARKS 
 FROM DB_INTERVIEW_QUESTIONS.TIGER_ANALYTICS.AVG_MARKS_OF_EACH_STU
 GROUP BY  STU_ID, STU_NAME);

 SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.INFORMATION;
 SELECT LISTAGG(SCHEMA_NAME, ','), LISTAGG(TABLE_NAME, ','), LISTAGG(COLUMN_NAME, ',') 
 FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.INFORMATION;

 SELECT LISTAGG(TABLE_NAME, '^') FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.INFORMATION;

 SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.JOB_TITLE;

 SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.JOB_TITLE
 ORDER BY CASE WHEN JOB_TITLE = 'CLERCK' THEN '1'
               ELSE 2
               END, JOB_TITLE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABA A
RIGHT OUTER JOIN  DB_INTERVIEW_QUESTIONS.YASH_TECHNOLOGIES.MYTABB B
ON A.ID = B.IB;

SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL1
AS
SELECT STU_ROLL, STU_NAME, STU_PHNO FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL;

SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL;
DROP TABLE DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL1;

SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.CLASS;
SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.STUDENT1;

CREATE OR REPLACE TABLE DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.STUDENT2
AS
SELECT * FROM DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.CLASS C
INNER JOIN  DB_INTERVIEW_QUESTIONS.VOLKSWAGEN.SCHOOL S
ON S.STU_ROLL = C.STU_ROLL
WHERE S.STU_NAME LIKE '%BASHEER%'
       AND C.STU_SECTION = 'D';

SELECT * FROM DB_INTERVIEW_QUESTIONS.VIRTUSA.COUNTRY_MEDALS_TABLE;

SELECT * FROM DB_INTERVIEW_QUESTIONS.VIRTUSA.COUNTRY_MEDALS_TABLE
ORDER BY CASE WHEN COUNTRY = 'INDIA' THEN '1'
              ELSE '2'
              END, MEDALS DESC;

(SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE
EXCEPT
SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE) 
UNION ALL
(SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_LOG_TABLE
EXCEPT
SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE);

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE;

SELECT EMP_ID, EMP_NAME SECOND_HIGHEST_EMP, DEPT, SALARY FROM (
SELECT *, DENSE_RANK() OVER(PARTITION BY DEPT ORDER BY SALARY DESC) DR 
FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE)
WHERE DR = 2;

SELECT EMP_ID, EMP_NAME "JUNIOR EMPLOYEES", DEPT FROM (
SELECT *, ROW_NUMBER() OVER (PARTITION BY DEPT ORDER BY EMP_ID DESC) RN 
FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE_SALARY_TABLE)
WHERE RN = 1;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2;
SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER;

UPDATE DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER
SET STATE = 'New York' WHERE STATE = 'NEWYORK';

UPDATE DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER
SET STATE = (CASE WHEN STATE LIKE 'Texas' THEN 'New York'
                  WHEN STATE LIKE 'New York' THEN 'Texas'
                  WHEN STATE LIKE 'Andhra' THEN 'Andhra Pradesh'
                  ELSE STATE
                  END);

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE;

SELECT DEPARTMENT, COUNT(EMP_ID) TOTAL_EMPYS 
FROM DB_INTERVIEW_QUESTIONS.TURING.EMPLOYEE2
WHERE SALARY >= '10000'
GROUP BY DEPARTMENT
HAVING TOTAL_EMPYS > 1;

SELECT * FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE;

SELECT CUST_ID, CUST_NAME, CUST_CITY 
FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE
WHERE INVOICE_AMT > (SELECT AVG(INVOICE_AMT) 
                     FROM DB_INTERVIEW_QUESTIONS.TURING.CUSTOMER_INVOICE);

SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.ITEM
LIMIT 5000;

CREATE OR REPLACE DATABASE ITEM_DB_STG;