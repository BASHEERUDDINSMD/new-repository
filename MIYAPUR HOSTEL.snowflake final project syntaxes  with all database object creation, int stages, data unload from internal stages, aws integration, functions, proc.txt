SELECT * FROM COVID19_EPIDEMIOLOGICAL_DATA.PUBLIC.JHU_DASHBOARD_COVID_19_GLOBAL;

SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'JHU_DASHBOARD_COVID_19_GLOBAL';

CREATE OR REPLACE DATABASE DB_JHU_DASHBOARD_COVID_19_STG;

CREATE OR REPLACE SCHEMA DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19;

CREATE OR REPLACE TABLE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA 
AS 
SELECT * FROM COVID19_EPIDEMIOLOGICAL_DATA.PUBLIC.JHU_DASHBOARD_COVID_19_GLOBAL LIMIT 0;

SELECT GET_DDL('TABLE','DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA');

DROP TABLE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA;

create or replace TABLE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD (
	COUNTRY_REGION VARCHAR,
	PROVINCE_STATE VARCHAR,
	COUNTY VARCHAR,
	FIPS VARCHAR,
	DATE VARCHAR,
	ACTIVE VARCHAR,
	PEOPLE_TESTED VARCHAR,
	CONFIRMED VARCHAR,
	PEOPLE_HOSPITALIZED VARCHAR,
	DEATHS VARCHAR,
	RECOVERED VARCHAR,
	INCIDENT_RATE VARCHAR,
	TESTING_RATE VARCHAR,
	HOSPITALIZATION_RATE VARCHAR,
	MORTALITY_RATE VARCHAR,
	LONG VARCHAR,
	LAT VARCHAR,
	ISO3166_1 VARCHAR,
	ISO3166_2 VARCHAR,
	LAST_UPDATE_DATE VARCHAR,
	LAST_REPORTED_FLAG VARCHAR
);

CREATE OR REPLACE DATABASE DB_JHU_DASHBOARD_COVID_19;

CREATE OR REPLACE SCHEMA DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19;

CREATE OR REPLACE SEQUENCE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.ENTRY_NO_SEQ
START = 1
INCREMENT =1;

create or replace TABLE DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_USERSTAGE (
    COUNTRY_REGION VARCHAR,
	PROVINCE_STATE VARCHAR,
	COUNTY VARCHAR,
	FIPS VARCHAR,
	DATE DATE,
	ACTIVE FLOAT,
	PEOPLE_TESTED FLOAT,
	CONFIRMED NUMBER,
	PEOPLE_HOSPITALIZED NUMBER,
	DEATHS NUMBER,
	RECOVERED FLOAT,
	INCIDENT_RATE FLOAT,
	TESTING_RATE FLOAT,
	HOSPITALIZATION_RATE FLOAT,
	MORTALITY_RATE FLOAT,
	LONG FLOAT,
	LAT FLOAT,
	ISO3166_1 VARCHAR,
	ISO3166_2 VARCHAR,
	LAST_UPDATE_DATE TIMESTAMP_NTZ,
	LAST_REPORTED_FLAG BOOLEAN
);

CREATE OR REPLACE STORAGE INTEGRATION AWS_STORAGE_INTEGRATION 
TYPE = EXTERNAL_STAGE
ENABLED = TRUE 
STORAGE_PROVIDER = S3
STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::468200154354:role/MY_STORAGE_INTEGRATION'
STORAGE_ALLOWED_LOCATIONS = ('s3://my-s3-bucket-sf-basheer/','s3://project-s3-bucket-basheer/');

CREATE OR REPLACE FILE FORMAT DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.TSV_FILE_FORMAT
TYPE = CSV
COMPRESSION = AUTO
TRIM_SPACE = TRUE
SKIP_HEADER = 1
FIELD_DELIMITER = '\t'
RECORD_DELIMITER = '\n'
FIELD_OPTIONALLY_ENCLOSED_BY = '"'
ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE
NULL_IF = ('\N')
ESCAPE = 'NONE';

CREATE OR REPLACE STAGE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.S3_EXT_STAGE
URL = 's3://project-s3-bucket-basheer/'
STORAGE_INTEGRATION = AWS_STORAGE_INTEGRATION;

LIST@DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.S3_EXT_STAGE;

CREATE OR REPLACE PIPE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.CONTINOUS_DATA_LOAD_PIPE
AUTO_INGEST = TRUE 
AS
COPY INTO DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD
FROM @DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.S3_EXT_STAGE
FILE_FORMAT = (FORMAT_NAME = 'DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.TSV_FILE_FORMAT')
ON_ERROR = 'SKIP_FILE';

SHOW PIPES;

SELECT SYSTEM$PIPE_STATUS('DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.CONTINOUS_DATA_LOAD_PIPE');

ALTER PIPE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.CONTINOUS_DATA_LOAD_PIPE SET PIPE_EXECUTION_PAUSED = TRUE;------- FOR PIPE EXECUTION PAUSED

ALTER PIPE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.CONTINOUS_DATA_LOAD_PIPE SET PIPE_EXECUTION_PAUSED = FALSE;------ FOR PIPE EXECUTION PAUSED TO RUNNING WITHIN 14 DAYS

select SYSTEM$PIPE_FORCE_RESUME('DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.CONTINOUS_DATA_LOAD_PIPE','staleness_check_override');---- FOR PIPE EXECUTION PAUSED TO RESUME AFTER 14 DAYS

SELECT * FROM TABLE( VALIDATE_PIPE_LOAD(PIPE_NAME => 'DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.CONTINOUS_DATA_LOAD_PIPE', START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())));

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD',START_TIME => DATEADD(HOUR,-1,CURRENT_TIMESTAMP())));

SELECT CURRENT_TIMESTAMP();

CREATE OR REPLACE STREAM DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.STRM_ON_SOURCE_DATA
ON TABLE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD
APPEND_ONLY = TRUE;

SHOW STREAMS;

SELECT SYSTEM$STREAM_HAS_DATA('DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.STRM_ON_SOURCE_DATA');

CREATE OR REPLACE PROCEDURE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.PROC_FOR_INSERT_DATA_INTO_TARGET_TABLE()
RETURNS STRING NOT  NULL
LANGUAGE SQL
EXECUTE AS OWNER 
AS
$$
DECLARE
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'INSERT INTO DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD
(COUNTRY_REGION, PROVINCE_STATE, COUNTY, FIPS, DATE, ACTIVE, PEOPLE_TESTED, CONFIRMED, PEOPLE_HOSPITALIZED, DEATHS, RECOVERED, INCIDENT_RATE,TESTING_RATE, HOSPITALIZATION_RATE, MORTALITY_RATE, LONG, LAT, ISO3166_1, ISO3166_2, LAST_UPDATE_DATE, LAST_REPORTED_FLAG)
SELECT
COUNTRY_REGION :: VARCHAR,
PROVINCE_STATE :: VARCHAR,
COUNTY :: VARCHAR,
FIPS :: VARCHAR,
DATE :: DATE,
ACTIVE :: FLOAT,
PEOPLE_TESTED :: FLOAT,
CONFIRMED :: NUMBER,
PEOPLE_HOSPITALIZED :: NUMBER,
DEATHS :: NUMBER,
RECOVERED :: FLOAT,
INCIDENT_RATE :: FLOAT,
TESTING_RATE :: FLOAT,
HOSPITALIZATION_RATE :: FLOAT,
MORTALITY_RATE :: FLOAT,
LONG :: FLOAT,
LAT :: FLOAT,
ISO3166_1 :: VARCHAR,
ISO3166_2 :: VARCHAR,
LAST_UPDATE_DATE :: TIMESTAMP_NTZ,
LAST_REPORTED_FLAG :: BOOLEAN
FROM DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.STRM_ON_SOURCE_DATA
WHERE METADATA$ACTION = ''INSERT''';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN 'DONE';
END;
$$;

LIST @DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.S3_EXT_STAGE;

COPY INTO DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD
FROM @DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.S3_EXT_STAGE
FILE_FORMAT = (FORMAT_NAME = 'DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.TSV_FILE_FORMAT')
ON_ERROR = 'ABORT_STATEMENT'
PURGE = TRUE;

SELECT COUNT(*) FROM DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD;

CREATE OR REPLACE STREAM DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.STRM_ON_SOURCE_DATA_BATCH_LOAD
ON TABLE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD 
APPEND_ONLY = TRUE;

SHOW STREAMS;

SELECT SYSTEM$STREAM_HAS_DATA('DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.STRM_ON_SOURCE_DATA_BATCH_LOAD');

CREATE OR REPLACE PROCEDURE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.PROC_FOR_INSERT_DATA_INTO_TARGET_TABLE_BATCH_LOAD()
RETURNS STRING NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE 
SELECT_STATEMENT VARCHAR;
RES RESULTSET;
BEGIN
SELECT_STATEMENT := 'INSERT INTO DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD
(COUNTRY_REGION, PROVINCE_STATE, COUNTY, FIPS, DATE, ACTIVE, PEOPLE_TESTED, CONFIRMED, PEOPLE_HOSPITALIZED, DEATHS, RECOVERED, INCIDENT_RATE,TESTING_RATE, HOSPITALIZATION_RATE, MORTALITY_RATE, LONG, LAT, ISO3166_1, ISO3166_2, LAST_UPDATE_DATE, LAST_REPORTED_FLAG)
SELECT
COUNTRY_REGION :: VARCHAR,
PROVINCE_STATE :: VARCHAR,
COUNTY :: VARCHAR,
FIPS :: VARCHAR,
DATE :: DATE,
ACTIVE :: FLOAT,
PEOPLE_TESTED :: FLOAT,
CONFIRMED :: NUMBER,
PEOPLE_HOSPITALIZED :: NUMBER,
DEATHS :: NUMBER,
RECOVERED :: FLOAT,
INCIDENT_RATE :: FLOAT,
TESTING_RATE :: FLOAT,
HOSPITALIZATION_RATE :: FLOAT,
MORTALITY_RATE :: FLOAT,
LONG :: FLOAT,
LAT :: FLOAT,
ISO3166_1 :: VARCHAR,
ISO3166_2 :: VARCHAR,
LAST_UPDATE_DATE :: TIMESTAMP_NTZ,
LAST_REPORTED_FLAG :: BOOLEAN
FROM DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.STRM_ON_SOURCE_DATA_BATCH_LOAD
WHERE METADATA$ACTION = ''INSERT''';
RES := (EXECUTE IMMEDIATE : SELECT_STATEMENT);
RETURN 'DONE';
END;
$$;

CREATE OR REPLACE TASK DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.BATCH_LOAD_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.STRM_ON_SOURCE_DATA_BATCH_LOAD')
AS
CALL DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.PROC_FOR_INSERT_DATA_INTO_TARGET_TABLE_BATCH_LOAD();

SHOW TASKS;

ALTER TASK DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.BATCH_LOAD_TASK RESUME;
ALTER TASK DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.BATCH_LOAD_TASK SUSPEND;

SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY( TASK_NAME => 'BATCH_LOAD_TASK', SCHEDULED_TIME_RANGE_START => DATEADD(HOUR,-1,CURRENT_TIMESTAMP())));

CREATE OR REPLACE TASK DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.CONT_LOAD_TASK
WAREHOUSE = COMPUTE_WH
AFTER DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.BATCH_LOAD_TASK
WHEN SYSTEM$STREAM_HAS_DATA('DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.STRM_ON_SOURCE_DATA')
AS 
CALL DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.PROC_FOR_INSERT_DATA_INTO_TARGET_TABLE();

SHOW TASKS;

ALTER TASK DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.CONT_LOAD_TASK RESUME;
ALTER TASK DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.CONT_LOAD_TASK SUSPEND;

SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(TASK_NAME =>'CONT_LOAD_TASK', SCHEDULED_TIME_RANGE_START => DATEADD(HOUR,-1,CURRENT_TIMESTAMP())));

SELECT CURRENT_TIMESTAMP();

SELECT COUNT(*) FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD;
SELECT COUNT(*) FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD;
SELECT COUNT(*) FROM DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD;
SELECT COUNT(*) FROM DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD;

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD',START_TIME => DATEADD(HOUR,-1,CURRENT_TIMESTAMP())));
---COPY HISTORY NOT SHOWN FOR DATA LOADING FROM SOURCE TO TARGET TABLE USING INSERT INTO COMMAND

SELECT * FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD;
SELECT * FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD;

CREATE OR REPLACE MASKING POLICY DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.MSK_POLICY 
AS (C1 VARCHAR) RETURNS VARCHAR ->
CASE WHEN CURRENT_ROLE() IN ('SYSADMIN', 'SECURITYADMIN', 'ORGANADMIN') THEN 'C1'
ELSE '*****'
END;

ALTER TABLE DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD
MODIFY COLUMN PROVINCE_STATE 
SET MASKING POLICY MSK_POLICY;

ALTER TABLE DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD 
MODIFY COLUMN COUNTY 
SET MASKING POLICY MSK_POLICY;

---- We can create a different masking policy on a single table

SELECT * FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD;
SELECT * FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD;

LIST @DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.S3_EXT_STAGE;

ALTER PIPE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.CONTINOUS_DATA_LOAD_PIPE SET
PIPE_EXECUTION_PAUSED = TRUE;

COPY INTO DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_EXTLOC 
FROM s3://project-s3-bucket-basheer/JHU_DASHBOARD_COVID19_GLOBAL4.tsv
STORAGE_INTEGRATION = AWS_STORAGE_INTEGRATION 
FILE_FORMAT = (FORMAT_NAME = 'DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.TSV_FILE_FORMAT')
ON_ERROR = 'ABORT_STATEMENT';

SELECT COUNT(*) FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_EXTLOC;

GRANT SELECT ON FUTURE TABLES IN SCHEMA DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19 TO ROLE SYSADMIN;

CREATE OR REPLACE STAGE DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.INT_STAGE;

LIST @DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.INT_STAGE;
LIST @DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.S3_EXT_STAGE;

CREATE OR REPLACE SECURE MATERIALIZED VIEW DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.MAT_VW_JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD AS SELECT COUNTRY_REGION, COUNTY, FIPS, ACTIVE, PEOPLE_TESTED, CONFIRMED, DEATHS, RECOVERED, TESTING_RATE, LAST_UPDATE_DATE FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD;

############# LOADING DATA USING NAMED INTERNAL STAGE ##########################
----GET COMMAND USING INTERNAL STAGE NOT SUPPORTED IN SNOWSIGHT WE NEED TO USE CMD PROMPT 
----COPY INTO COMMAND WORK IN SNOWSIGHT
----(put file) should be in small letters
put file://C:\Users\BASHEERUDDIN\Downloads\JHU_DASHBOARD_COVID19_GLOBAL4.tsv @DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.INT_STAGE 
COPY INTO DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_USING_INTSTAGE 
FROM @DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.INT_STAGE
FILE_FORMAT = (FORMAT_NAME = 'DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.TSV_FILE_FORMAT')
ON_ERROR = 'ABORT_STATEMENT' ----NOT SUPPORTED IN CMD LOAD DATA FROM INTERNAL STAGE
PURGE = TRUE;-----NOT SUPPORTED IN CMD LOAD DATA FROM INTERNAL STAGE

SELECT COUNT(*) FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_USING_INTSTAGE;

########### DATA LOAD USING TABLE STAGE(@%) INTERNAL STAGE (PUT COMMND NOT SUPPORTED IN SNOWSIGHT BUT COPY INTO COMMAND SUPPORTED IN SNOWSIGHT) #############

put file://C:\Users\BASHEERUDDIN\Downloads\JHU_DASHBOARD_COVID19_GLOBAL4.tsv @%JHU_DASHBOARD_COVID_19_DATA_USING_TABLESTAGE;

COPY INTO DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_USING_TABLESTAGE 
FROM @%DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_USING_TABLESTAGE
FILE_FORMAT = (FORMAT_NAME = 'DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.TSV_FILE_FORMAT');

SELECT COUNT(*) FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_USING_TABLESTAGE;

######## DATA LOAD USING USER STAGE(@~) PUT COMMAND NOT WORK BUT COPY INTO COMMAND WORK IN SNOWSIGHT#########

put file://C:\Users\BASHEERUDDIN\Downloads\JHU_DASHBOARD_COVID19_GLOBAL4.tsv @~;

COPY INTO DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_USERSTAGE 
FROM @~ 
FILE_FORMAT =(FORMAT_NAME = 'DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.TSV_FILE_FORMAT');

SELECT COUNT(*) FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATDB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOADA_USERSTAGE;
 
CREATE OR REPLACE FUNCTION DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.FUN_SELCT_RECORD(COUNTRY_NAME VARCHAR)
RETURNS VARCHAR
LANGUAGE SQL
AS
$$
SELECT COUNTRY_REGION FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_USING_WEBUI
WHERE COUNTRY_REGION = 'COUNTRY_NAME'
$$;

SELECT DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.FUN_SELCT_RECORD('Australia') AS Australia_country_records;

#### FOR UNLOAD DATA COPY COMMAND TO LOAD DATA FROM TABLE TO STAGE SUPPORTED IN SNOWSIGHT BUT GET COMMAND TO LOAD DATA FROM STAGE TO LOCAL FILE NOT SUPPORTED IN SNOWSIGHT############################

COPY INTO @DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.INT_STAGE FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_USING_INTSTAGE;  

LIST @DB_JHU_DASHBOARD_COVID_19_STG.SCH_JHU_DASHBOARD_COVID_19.INT_STAGE;

GET @int_stage/data_0_0_0.csv.gz file://C:\Users\BASHEERUDDIN\Documents\unload_files;------NOT SUPPORTED IN SNOWSIGHT

SELECT COUNT(*) FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_USING_INTSTAGE;
------- DATA WILL BE THERE IN TABLES CANT BE DELETED BECAUSE IT JUST COPY FROM TABLE --------------

------- UNLOAD DATA FROM TABLE TO INTERNAL STAGE(USER STAGE) ---------
COPY INTO @~ FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_USERSTAGE;

LIST @~;

get @~/data_0_0_0.csv.gz file://C:\Users\BASHEERUDDIN\Downloads\UNLOAD_FILES2;

-----UNLOAD DATA FROM TABLE TO INTERNALSTAGE(TABLE STAGE)-------
COPY INTO @%JHU_DASHBOARD_COVID_19_DATA_USING_TABLESTAGE FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_USING_TABLESTAGE;

list @%JHU_DASHBOARD_COVID_19_DATA_USING_TABLESTAGE;--give only table name not entire path

get @%JHU_DASHBOARD_COVID_19_DATA_USING_TABLESTAGE/data_0_0_0.csv.gz file://C:\Users\BASHEERUDDIN\Downloads\UNLOAD_FILES2;--Give only table name not entire path 

CREATE OR REPLACE TABLE DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.CLN_JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD
CLONE DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD;

SELECT * FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.CLN_JHU_DASHBOARD_COVID_19_DATA_CONTINOUS_LOAD; 

DELETE FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD
WHERE COUNTRY_REGION = 'Australia';

SELECT * FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD;

SELECT COUNT(*) FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD;

CREATE OR REPLACE TABLE DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD1 CLONE DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD
AT(OFFSET => -60*10);

SELECT COUNT(*) FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD1;

CREATE OR REPLACE TABLE DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD2 
CLONE DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD 
BEFORE(STATEMENT => '01ae8605-3200-da8f-0005-558a00040076');

SELECT COUNT(*) FROM DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JHU_DASHBOARD_COVID_19_DATA_BATCH_LOAD2;


SELECT * FROM INFORMATION_SCHEMA.TABLE_STORAGE_METRICS;----- GIVE ALL THE DETAILS WHETHER TABLE CLONED OR NOT ALL INFORMATION RELATED TO TABLES

SELECT * FROM DB_SF.SCH_SF.JASON_TAB;

CREATE OR REPLACE TABLE DB_JHU_DASHBOARD_COVID_19.SCH_JHU_DASHBOARD_COVID_19.JSON_TABLE AS
SELECT 
JSON_DATA:firstName::varchar as first_name,
JSON_DATA:lastName::varchar as last_name,DB_IBM
JSON_DATA:gender::varchar as gender,
JSON_DATA:age::number as age,
JSON_DATA:phoneNumbers[0].number::number as phone_number,
JSON_DATA:phoneNumbers[0].type::varchar as phone_type,
JSON_DATA:address.streetAddress::varchar as street,
JSON_DATA:address.postalCode::number as postal_area,
JSON_DATA:address.city::varchar as CITY,
JSON_DATA:address.state::varchar as state
from DB_SF.SCH_SF.JASON_TAB;

CREATE OR REPLACE FUNCTION DIAMETER (RADIUS FLOAT)
RETURNS FLOAT
AS
$$
2*RADIUS
$$;

SELECT  DB_IBM.SCH_IBM.DIAMETER(2.0);

CREATE OR REPLACE FUNCTION AREA_OF_RECTANGLE(LENGTH FLOAT,BREDTH FLOAT)
RETURNS FLOAT
AS
$$
LENGTH*BREDTH
$$;

CREATE OR REPLACE FUNCTION AREA_OF_EQ_TRIANGLE(RADIUS INT, HEIGHT INT)
RETURNS FLOAT
AS
$$
0.33*PI()*RADIUS*RADIUS*HEIGHT
$$;

SELECT DB_IBM.SCH_IBM.AREA_OF_EQ_TRIANGLE(70, 30);


ALTER SESSION SET USE_CACHED_RESULT = FALSE;

##################TRANSFORMATION WHILE LOADING DATA INTO TABLE ##############;

//Create database
CREATE DATABASE IF NOT EXISTS MYDB;
USE DATABASE MYDB;

//Creating the table

CREATE OR REPLACE TABLE MYDB.PUBLIC.LOAN_PAYMENT (
  "Loan_ID" STRING,
  "loan_status" STRING,
  "Principal" STRING,
  "terms" STRING,
  "effective_date" STRING,
  "due_date" STRING,
  "paid_off_time" STRING,
  "past_due_days" STRING,
  "age" STRING,
  "education" STRING,
  "Gender" STRING
 );
  
SELECT * FROM PUBLIC.LOAN_PAYMENT; -- 0 

//Loading the data from S3 bucket
COPY INTO PUBLIC.LOAN_PAYMENT
    FROM s3://bucketsnowflakes3/Loan_payments_data.csv
    file_format = (type = csv , field_delimiter = ',' , skip_header=1);    

//Validate the data
SELECT * FROM PUBLIC.LOAN_PAYMENT;

//Check the count
SELECT COUNT(*) FROM PUBLIC.LOAN_PAYMENT; -- 500

============
Transforming Data while Loading
===============
// Create a Schema for External Stages

CREATE OR REPLACE SCHEMA MYDB.external_stages;

// Publicly accessible staging area    
CREATE OR REPLACE STAGE MYDB.external_stages.aws_ext_stage
    url='s3://bucketsnowflakes3';

// listing the files in external stage
list @MYDB.external_stages.aws_ext_stage;

//Case 1: Just Viewing Data from ext stage
select $1, $2, $3, $4, $5, $6 from @MYDB.external_stages.aws_ext_stage/OrderDetails.csv;

//Giving Alias Names to fields
select $1 as OID, $2 as AMT, $3 as PFT, $4 as QNT, $5 as CAT, $6 as SUBCAT 
from @MYDB.external_stages.aws_ext_stage/OrderDetails.csv;

select $1 as OID, $4 as QNT, $2 as AMT from @MYDB.external_stages.aws_ext_stage/OrderDetails.csv;
 

// Transforming Data while loading

// Case 2: load only required fields

CREATE OR REPLACE TABLE MYDB.PUBLIC.ORDERS_EX (
    ORDER_ID VARCHAR(30),
    AMOUNT INT
    );
 
COPY INTO MYDB.PUBLIC.ORDERS_EX
    FROM (select s.$1, s.$2 from @MYDB.external_stages.aws_ext_stage s)
    file_format= (type = csv field_delimiter=',' skip_header=1)
    files=('OrderDetails.csv');    

SELECT * FROM MYDB.PUBLIC.ORDERS_EX;

  
// Case3: applying basic transformation by using functions

CREATE OR REPLACE TABLE MYDB.PUBLIC.ORDERS_EX (
    ORDER_ID VARCHAR(30),
    PROFIT INT,
 AMOUNT INT,    
    CAT_SUBSTR VARCHAR(5),
    CAT_CONCAT VARCHAR(60),
 PFT_OR_LOSS VARCHAR(10)
  );

//Copy Command using a SQL function
COPY INTO MYDB.PUBLIC.ORDERS_EX 
    FROM (select 
            s.$1,
            s.$3,
   s.$2,
            substring(s.$5,1,5),
            concat($5,$6), -- or simply $5||$6
            CASE WHEN s.$3 less_than= 0 THEN 'LOSS' ELSE 'PROFIT' END 
          FROM @MYDB.external_stages.aws_ext_stage s)
 file_format= (type = csv field_delimiter=',' skip_header=1)
 FILES=('OrderDetails.csv');

SELECT * FROM MYDB.PUBLIC.ORDERS_EX;

// Case 4: Loading sequence numbers in columns

// Create a sequence
create sequence seq1;

CREATE OR REPLACE TABLE MYDB.PUBLIC.LOAN_PAYMENT (
  "SEQ_ID" number default seq1.nextval,
  "Loan_ID" STRING,
  "loan_status" STRING,
  "Principal" STRING,
  "terms" STRING,
  "effective_date" STRING,
  "due_date" STRING,
  "paid_off_time" STRING,
  "past_due_days" STRING,
  "age" STRING,
  "education" STRING,
  "Gender" STRING
 );
 
//Loading the data from S3 bucket
COPY INTO PUBLIC.LOAN_PAYMENT("Loan_ID", "loan_status", "Principal", "terms", "effective_date", "due_date",
"paid_off_time", "past_due_days", "age", "education", "Gender")
    FROM s3://bucketsnowflakes3/Loan_payments_data.csv
    file_format = (type = csv  field_delimiter = ','  skip_header=1);  
       
//Validate the data
SELECT * FROM PUBLIC.LOAN_PAYMENT;


// Case 5: Using auto increment 

CREATE OR REPLACE TABLE MYDB.PUBLIC.LOAN_PAYMENT2 (
  "LOAN_SEQ_ID" number autoincrement start 1001 increment 1,
  "Loan_ID" STRING,
  "loan_status" STRING,
  "Principal" STRING,
  "terms" STRING,
  "effective_date" STRING,
  "due_date" STRING,
  "paid_off_time" STRING,
  "past_due_days" STRING,
  "age" STRING,
  "education" STRING,
  "Gender" STRING
 );
 
//Loading the data from S3 bucket
COPY INTO PUBLIC.LOAN_PAYMENT2("Loan_ID", "loan_status", "Principal", "terms", "effective_date", "due_date",
"paid_off_time", "past_due_days", "age", "education", "Gender")
    FROM s3://bucketsnowflakes3/Loan_payments_data.csv
    file_format = (type = csv  field_delimiter = ','  skip_header=1);  
       
//Validate the data
SELECT * FROM PUBLIC.LOAN_PAYMENT2;



